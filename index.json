[
{
	"uri": "http://jsyang.ca/games/",
	"title": "Games",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://jsyang.ca/cycling/",
	"title": "Cycling",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://jsyang.ca/art/",
	"title": "Art",
	"tags": [],
	"description": "",
	"content": " the expression or application of human creative skill and imagination, typically in a visual form such as painting or sculpture\n "
},
{
	"uri": "http://jsyang.ca/guides/",
	"title": "Guides",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://jsyang.ca/tools/",
	"title": "Tools",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://jsyang.ca/repairs/",
	"title": "Repairs",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://jsyang.ca/hacks/",
	"title": "Hacks",
	"tags": [],
	"description": "",
	"content": " an inelegant but effective solution to a problem\n "
},
{
	"uri": "http://jsyang.ca/hikes/",
	"title": "Hikes",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://jsyang.ca/guides/gear-360-workflow/",
	"title": "Samsung Gear 360 (SM-200) image and video workflow on MacOS",
	"tags": [],
	"description": "",
	"content": " I\u0026rsquo;ve long been interested in 360 panoramic photos and videos and being a patient tech consumer, I was fortunate to get the 2016 Gear 360 camera for the low price of £80 shipped; 22% of the original launch price of £350.\nAdditionally, I wrote a simple 360 web viewer, so I can use any image host (e.g. Imgur, Dropbox, etc.) and not be tied to a specific online platform like Kuula.\n Images You will have to install Hugin manually rather than via brew cask install hugin as the cask formula usually is out of date with the official releases. Go here to find the latest binaries: https://sourceforge.net/projects/hugin/files/latest/download\nOnce installed, clone this project https://github.com/ultramango/gear360pano. Now you can use the HuginStitchProject tool installed as part of the Hugin package to use the template files gear360sm-c200.pto (if using the Gear 360 SM-C200 camera) to stitch your dual fish eye photos together to form a spherical 360 photo.\n Open the HuginStitchProject app Select the PTO file You will be prompted to enter the name of the output JPEG file.  Note: You can either edit the PTO file and change references to \u0026ldquo;dummy.jpg\u0026rdquo; to \u0026ldquo;your_input_filename.jpg\u0026rdquo; or simply rename your input file to \u0026ldquo;dummy.jpg\u0026rdquo;.\nUploading to Facebook You can use exiftool to add metadata so Facebook (and possibly more social media in the future) can recognize the image and use the appropriate viewer on the platform.\n# Install exiftool brew install exiftool exiftool -ProjectionType=\u0026quot;equirectangular\u0026quot; photo.jpg # 'photo.jpg' is the photo you want to tag  Video Haven\u0026rsquo;t figure out a way to get multiblend to compile on OSX so we\u0026rsquo;ll have to use an alternative projection tool.\nWe can use this tool to roughly convert a 360 video https://github.com/raboof/dualfisheye2equirectangular\nFollow the instructions to compile gcc -o projection projection.c -lm and then ensure that the command to generate the mapping file is taking the correct dimensions of the video input.\ne.g. If the MP4 files are in total 2560x1280 then the command would be ./projection -x xmap_dokicam_video.pgm -y ymap_dokicam_video.pgm -h 1280 -w 2560 -r 1280 -c 2560 -b 35 -m samsung_gear_360 vs the example given in the project instructions\nUse ffmpeg (install via brew install ffmpeg) to convert your video file: ffmpeg -i movie.mp4 -i xmap_dokicam_video.pgm -i ymap_dokicam_video.pgm -filter_complex remap out.mp4\nUploading to YouTube If uploading to YouTube, use Google\u0026rsquo;s SpatialMedia metadata injector tool to allow YT to identify the upload as a spherical (equirectangular) 360 video. https://github.com/google/spatial-media/releases\nUseful code + apps  Modified Samsung Gear 360 Manager APK to work on all Android devices\n Reverse engineering project for the SM-200\n The Gear 360 uses the Accessory Devices Bluetooth protocol to talk to paired phones\n Homemade underwater housing\n Fix for overheating issue\n  "
},
{
	"uri": "http://jsyang.ca/hacks/gear-vr-rev-eng/",
	"title": "Gear VR Controller Reverse Engineering",
	"tags": [],
	"description": "",
	"content": "                             The result so far Here\u0026rsquo;s a video demo of I was able to achieve with this reverse engineering effort:\n  Click here if you\u0026rsquo;re interested in running this yourself.\nBackground About a week ago I was having a look at some new input devices to use for my game experiments that were a little more interesting than a simple USB or Bluetooth Gamepad. As I kept a close eye on consumer VR technology in 2016\u0026frasl;2017, it occurred to me now that many of the devices released in the past year have been updated and on the market for at least a few months. Google Daydream had been out since November 2016, sold with a packed-in controller, and the Gear VR received a similar 3 degrees of freedom (3DOF) controller in April 2017.\nBeing the first to market, the Daydream controller was already (1) reverse (2) engineered (3). It wouldn\u0026rsquo;t take much to use it as an input for my game ideas.\nHowever, there were clear hardware design disadvantages versus the Gear VR controller:\n A non-removable built-in battery with USB-C as the only means of charging it. Users reported much shorter battery life than the Gear VR version. It lacked a trigger button. It was much more prone to sensor drift than its Gear VR counterpart.  Moreover, it was not sold separately, which meant a seller on Amazon, eBay, or other marketplace would be incentivized to sell the headset and the controller together as a whole package rather than split the devices.\nThe Gear VR Controller used standard AAA batteries and was better designed ergonomically; I found an Amazon Warehouse Deals listing that sold the controller only for £20. Shipped the same day, it arrived in less than a week. Praise modern logistics!\nUnboxing and RTFM After unboxing the device, the first thing I tried doing was pairing it with my laptop. No dice. The device didn\u0026rsquo;t even show up in the macOS Bluetooth menu in System Preferences. Have to try something else.\nI sought out several freeware Bluetooth LE (BTLE) explorer apps and ended up using LightBlue Bluetooth Device Discovery. This app picked it up straight away.\nThere was an unusual quirk, however, the cause of which I didn\u0026rsquo;t manage to fully figure out. Occasionally, the controller would break the Bluetooth connection as it entered its sleep mode. Once re-awakened, any attempt to pair with it again would cause it to toggle rapidly between being paired and unpaired.\nThe only solution I found for this was to manually remove the device profile from the Bluetooth device list every time this happened so it could formally pair again.\nI had little prior experience using Bluetooth devices at this level so I had to read up on how the whole BTLE tech stack is meant to work.\nEssentially, every BTLE client device talks to a BTLE host device via a GATT (Generic Attributes) profile.\nThis profile tells the host what the client can do (GATT SERVICES, e.g. read the current temperature) and groups them together (GATT CHARACTERISTICS, e.g. environment sensing \u0026gt; read the current temperature).\nFor each service:\n You can read its value You can write a value to it You can subscribe/unsubscribe to notifications for when values change  My goal was simple: use the Gear VR controller outside of the Gear VR apps and without other hardware.\nInitial survey I was able to map out all of the services and characteristics of the controller very quickly. The next step was trying to figure out what they did and how to use them.\nServices Characteristic 180F 2A19 180A 2A29 2A24 2A25 2A27 2A26 2A28 2A50 1879 2A4E 2A4B 2A4A 2A4C 2A4D 2A22 2A32 4F63756C-7573-2054-6872-65656D6F7465 C8C51726-81BC-483B-A052-F7A14EA3D281 C8C51726-81BC-483B-A052-F7A14EA3D282 FEF5 8082CAA8-41A6-4021-91C6-56F9B954CC34 724249F0-5EC3-4B5F-8804-42345AF08651 6C53DB25-47A1-45FE-A022-7C92FB334FD4 9D8489A3-000C-49D8-9183-855B673FDA31 457871E8-D516-4CA1-9116-57D0B17B9CB2 5F78DF94-798C-46F5-990A-B3EB6A065C88 61C8849C-F639-4765-946E-5C3419BEBB2A 64B4E8B5-0DE5-401B-A21D-ACC8DB3B913A 42C3DFDD-77BE-4D9C-8454-8F875267FB3B B7DE1EEA-823D-43BB-A3AF-C4903DFCE23C  Using LightBlue and a little bit of help from bluetooth.com, we can see that services 180F and 180A are the Battery Service and Device Information Service, respectively.\nThe other services were non-standard, and a search for those UUIDs (e.g. 4F63756C-7573-2054-6872-65656D6F7465) turned up very little. I did try searching for other reverse engineering efforts on GitHub and found a wiki page indicating that FEF5 was possibly a service used for firmware updates. No doubt a skilled person with more interest in this area will figure it.\nThis leaves 1879 and 4F63756C-7573-2054-6872-65656D6F7465 the only services still unknown.\nGear VR Input Service APK Thankfully, retrieving, decompiling, and debugging APK (Android Package Kit) files are all tasks that are well supported and documented within the Android ecosystem. It was sensible to look in that direction next.\nGear VR games make use of the controller\u0026rsquo;s readings through a service that translates raw Inertial Measurement Unit (IMU) data into something that a game developer is more likely to use: orientation, touchpad position, and which key presses are happening at any given moment. For common input devices like keyboards and mice, this step is handled by the OS, usually using the HID protocol. The Gear VR controller, however, is custom hardware and we can assume the Samsung Gear VR platform developers had to write their own service.\nIf we peek inside this service, we might be able to figure out how they talk to the Gear VR controller over BTLE and re-implement this mechanism wherever we want! I found the APK for the input service after scanning through some Gear VR threads on forums.xda-developers.com.\nThe input service package name is com.samsung.android.app.vr.input.service.\nQuickly glancing inside You can open up the APK in a variety of ways:\n Rename the APK to ZIP and use the System Archiver or other unzip tool to extract the contents\n Inflate with apktool. The resulting output are SMALI files which is Dalvik human-readable bytecode. Code in this format can be manipulated and repacked into an APK with little effort.\n Use ClassyShark or other tools to directly open an APK and view the internal structure  You can also extract strings from some of the files inside the APK. This is a great way to scout for particularly helpful debug messages; doing that can quickly tell you if the package has relevant functionality.\nFor instance, I found the string com.samsung.android.hmt.vrsystem to be particularly interesting: what does HMT stand for? Thanks to a sharp-eyed fellow Redditor, we now know it is Samsung\u0026rsquo;s internal codename for the Gear VR system: Head Mounted Theater.\nWhat was more interesting were strings like the one below, which confirmed this is where we should look for further progress toward the goal.\n\u0026quot;Accel: %+05.1f, %+05.1f, %+05.1f \\n (%+05.1f, %+05.1f, %+05.1f)\u0026quot;  Next, I extracted the APK as a ZIP (first option) and then used the classes.dex file (contains all the compiled Java classes) within the APK with dex2jar. Doing this lets allows me to use a Java class decompiler (JD-GUI) to drill deeper into code that\u0026rsquo;s a little more human-readable.\nThis is what it looks like:\nThis is starting to look more intelligible! We can go through everything to understand what the classes do and how they all fit together.\nIdentify modules With some patience and time, a few modules were identified.\n1. Software update module com.samsung.android.app.vr.input.service \u0026gt; package \u0026quot;a\u0026quot;\nThe first one was the part that handled trusted updated. It was easy to recognize since there were many strings inside this module that made reference to certificates and the names of the hardware manufacturers.\ncerts/occulus.cert certs/samsung.cert  Also found inside the decompiled resources were two X.509 certs that contain public keys for verifying that downloaded software updates are coming from either Samsung or Occulus. Out of curiosity, I got the certificate information using:\n# DER is the binary format openssl x509 -inform DER -text -noout -in certs/samsung.crt openssl x509 -inform DER -text -noout -in certs/oculus.crt  2. Dynamic library loader com.samsung.android.app.vr.input.service \u0026gt; package \u0026quot;b\u0026quot;\nThe second module to be identified included code to handle third-party libraries used by the app.\n com.samsung.android.app.vr.input.service \u0026gt; package \u0026ldquo;b\u0026rdquo; \u0026gt; a.class\nDynamic library version query\n com.samsung.android.app.vr.input.service \u0026gt; package \u0026ldquo;b\u0026rdquo; \u0026gt; b.class\nDynamic library loader?\n com.samsung.android.app.vr.input.service \u0026gt; package \u0026ldquo;b\u0026rdquo; \u0026gt; c.class\nPossibly a mechanism to force-close the app on non-Samsung devices \u0026ldquo;com.samsung.android.feature.FloatingFeature\u0026rdquo;\n  3. Memory mapped device interface com.samsung.android.app.vr.input.service \u0026gt; package \u0026quot;c\u0026quot;\nIts overall purpose may be inferred from \u0026ldquo;MSM\u0026rdquo;, which could be \u0026ldquo;Media State Machine\u0026rdquo;? It decodes byte arrays received as data from the controller and provides the interface defined by\ncom.samsung.android.app.vr.input.service/unknown/com/samsung/android/app/vr/input/service/IRemoteInterface.aidl  4. Protocol com.samsung.android.app.vr.input.service \u0026gt; package \u0026quot;protocol\u0026quot;\nFirstly, the little-endian hex strings within package \u0026quot;a\u0026quot; are of special note since these are the commands sent to the controller.\nNext, we find that a.class shows\nstatic { e.put(\u0026quot;4f63756c-7573-2054-6872-65656d6f7465\u0026quot;, \u0026quot;CUSTOM SERVICE\u0026quot;); e.put(\u0026quot;c8c51726-81bc-483b-a052-f7a14ea3d282\u0026quot;, \u0026quot;COMMAND SEND\u0026quot;); e.put(\u0026quot;c8c51726-81bc-483b-a052-f7a14ea3d281\u0026quot;, \u0026quot;DATA RECEIVE\u0026quot;); }  This is full annotation of one of the unknown services and along with its characteristics. It tells us we should send commands to c8c51726-81bc-483b-a052-f7a14ea3d282 and expect to receive data from c8c51726-81bc-483b-a052-f7a14ea3d281. Bingo!\nIn the meantime, I found another reverse engineering attempt for the Gear VR controller which used exactly one of these commands on the COMMAND SEND characteristic to tell the controller to begin sending data. I tried sending these commands with LightBlue and it worked great!\nHere are all the commands:\n\u0026quot;0000\u0026quot; = Turn all modes off and stop sending data \u0026quot;0100\u0026quot; = Sensor mode Send touchpad and buttons data but update at lower rate protocol \u0026gt; a \u0026gt; o.class \u0026quot;0200\u0026quot; = ??? initiate firmware upgrade sequence? \u0026quot;0300\u0026quot; = Calibration mode protocol \u0026gt; a \u0026gt; n.class \u0026quot;0400\u0026quot; = Keep-alive command protocol \u0026gt; a \u0026gt; p.class \u0026quot;0500\u0026quot; = Setting mode (???) protocol \u0026gt; a \u0026gt; m.class \u0026quot;0600\u0026quot; = LPM Enable (LPM = ???) protocol \u0026gt; a \u0026gt; k.class \u0026quot;0700\u0026quot; = LPM Disable protocol \u0026gt; a \u0026gt; j.class \u0026quot;0800\u0026quot; = VR Mode Enable high frequency event data update ??? protocol \u0026gt; a \u0026gt; l.class  At this point, I started writing a Web Bluetooth script to make the data inspection easier and more fine-tuned to the information I should be expecting to get back from the device.\nJackpot com.samsung.android.app.vr.input.service \u0026gt; package \u0026quot;ui\u0026quot; \u0026gt; c.class  This class had a lot of debug strings in it, include the previously scouted accelerometer debug string. It contained nearly all the bit-masks and logic needed to get the correct controller event data. Being cautious of little-endian byte order and the float, short, and int size differences (and associated typecasts) between Java and Javascript, it was a matter of simple translation to re-implement the decompiled code in JS using Web Bluetooth to send data and parse the received data.\nAs I was playing more with the data, I found it helpful to write a histogram for the accumulated entropy of the bytes that were coming back to see where in the byte arrays I should be looking to verify that each byte was being read from the correct index.\nAs you can see, the troughs in the graph clearly delineate the order and structure of the bytes when the controller is waved around. Having this extra tool while I was playing with the byte arrays made life so much easier. Eventually, I figured out enough of the data to attempt using it in a 3D context.\nSensor fusion and drift Sensor fusion is all about taking gyroscope (momentary rotation readings), accelerometer (momentary acceleration readings), and in some algorithms, magnetometer (compass readings) readings to reliably output an object\u0026rsquo;s orientation in 3D space.\nUnfortunately, unlike the Google Daydream controller, the Gear VR controller does not seem to do sensor fusion on the device itself, which means we have to do it in software in order to get the actual orientation values (e.g. pitch, yaw, roll or other rotations) that we care about as game developers.\nThere are two major open-source sensor fusion filter for IMUs that people seem to be using: Mahony and Madgwick. Each has its own biases and characteristics. To my knowledge the key difference is that the Madgwick sensor fusion algorithm will use magnetometer readings to compensate for drift. Therefore it is extra-important to calibrate the magnetometer.\nI made a rough attempt at tweaking the values for sensor fusion; it\u0026rsquo;s still far from perfect. Perhaps I\u0026rsquo;ll be able to take that further in a later attempt. There is a calibration mode that I still haven\u0026rsquo;t explored. The answer may yet lie in there.\nTakeaways This project gave me a cursory understanding of how sensor fusion and IMUs work and how the Bluetooth stack works. In regards to pre-existing reverse engineering efforts, I learned how critical it is to always use primary sources (such as the decompiled code) as the first step for figuring something out.\nIf you have to use shortcuts, verify you understand what the shortcut is doing fully and verify that it\u0026rsquo;s making all the correct assumptions. Assuming somebody else\u0026rsquo;s work is correct is an expensive risk time-wise.\nReverse engineering is FUN!\nDemo If you use Chrome and have a Gear VR controller handy, you can try the demo below:\n Source code for the project lives here.\nTeardown photos I couldn\u0026rsquo;t resist a teardown of the hardware.\n   1st\n      2nd\n      3rd\n      4th\n      5th\n      6th\n     "
},
{
	"uri": "http://jsyang.ca/guides/mocute-bluetooth-gamepad/",
	"title": "Mocute Bluetooth Gamepads",
	"tags": [],
	"description": "",
	"content": " These cheap bluetooth gamepads are often branded and sold as remote shutter buttons for smartphones. I think their best purpose is actually to be used as gamepads, especially for mobile devices and bluetooth-enabled PCs. They can be routinely found on either eBay or Amazon for around $3 or 5 GBP, shipping included. This makes them one of the best value bluetooth input devices on the market as of 2018.\nDepending on the seller, the gamepads can be found under different branding, though functionally they are all the same device. What you get is a bluetooth controller with an analog stick, 4 buttons, and a micro-USB port for charging its built-in LiPo battery (manufacturer claim: 20 hours of usage).\nAs far as I can tell, the cheaper listings are just as good as the listings from sellers that try to mark up the price of the device; usually $12 or £8.\nHow to use  Holding the I/O button for 3 seconds will power the device on/off.\n The GAME \u0026lt;--\u0026gt; KEY toggle will work differently depending on what device it\u0026rsquo;s paired with:\n On OSX, the GAME mode, the analog stick will send movement control keystrokes along with some characters for each direction (up, down, left, right).\niOS seems to send \u0026ldquo;yt\u0026rdquo;\ntriangle sends \u0026ldquo;jn\u0026rdquo;\na sends \u0026ldquo;uf\u0026rdquo;\nx sends \u0026ldquo;hr\u0026rdquo;\nThis mode is good to use for game keymappings.\n On OSX, the KEY mode, the analog stick won\u0026rsquo;t send anything to a textfield.\niOS seems to send Volume Up\nx sends Volume Down\ntriangle doesn\u0026rsquo;t send anything\na sends Mute Volume\nThis mode appears to be used for media control.\n   MTK and Android Modes You can set the controller to emit different kinds of input by putting it in either \u0026ldquo;MTK\u0026rdquo; or \u0026ldquo;Android\u0026rdquo; mode. Start by powerin off the controller.\n Holding down the triangle button + power button will set it to MTK mode (red LED, when powered on in this mode)\n Holding down the a button + power button will set it to Android mode (blue LED, when powered on in this mode)\n  I use the MTK mode when paired with OSX to play games in OpenEmu.\nCompatibility with OpenEmu I\u0026rsquo;ve manage to use these controllers (in GAME mode) with the HTML5 GamePad API as well as for GameBoy and NES (Famicom) emulation with OpenEmu.\nIf you\u0026rsquo;re attempting to use OpenEmu, ensure you have closed Chrome as leaving Chrome running is known to capture input states based on how it implements the HTML Gamepad API.\nInitially, the controller may register in your Bluetooth listing with its MAC address. Once paired, these are typical device names:\nCelestial Combat I\u0026rsquo;ve been able to write a game that fully supports this type of gamepad, which makes it perfectly serviceable for mobile game play: Celestial Combat.\nFull instructions leaflet scan You can find a scan of the full instructions here\n"
},
{
	"uri": "http://jsyang.ca/guides/faulty-rpi0w/",
	"title": "Faulty Raspberry Pi Zero W",
	"tags": [],
	"description": "",
	"content": " If you\u0026rsquo;ve done everything you\u0026rsquo;ve known how to get a Raspberry Pi Zero W (v1.1) to work but can\u0026rsquo;t get it to boot up and recognize the Wifi, there\u0026rsquo;s a chance you may have a defective board.\n  Setup After purchasing you should have been able to do this to get it working:\n https://gist.github.com/gbaman/50b6cca61dd1c3f88f41 https://gist.github.com/gbaman/975e2db164b3ca2b51ae11e45e8fd40a https://www.youtube.com/watch?v=xj3MPmJhAPU  Instead, research has led me to reach the same conclusions as these other people who have had the same issues with their RP0W\n https://github.com/raspberrypi/firmware/issues/758 https://www.raspberrypi.org/forums/viewtopic.php?t=178362 https://forum.core-electronics.com.au/t/pi-zero-w-firmware-showing-pi-model-b/1076/11 https://www.raspberrypi.org/forums/viewtopic.php?t=177652\u0026amp;p=1132791  Running rpi-update updated the firmware but hardware was still reporting bad results.\ncat /sys/firmware/devicetree/base/model Raspberry Pi Model B Rev 2 cat /proc/cpuinfo processor\t: 0 model name\t: ARMv6-compatible processor rev 7 (v6l) BogoMIPS\t: 697.95 Features\t: half thumb fastmult vfp edsp java tls CPU implementer\t: 0x41 CPU architecture: 7 CPU variant\t: 0x0 CPU part\t: 0xb76 CPU revision\t: 7 Hardware\t: BCM2835 Revision\t: 000f Serial\t: 00000000dbe19693 uname -a Linux raspberrypi 4.9.50+ #1035 Wed Sep 13 22:53:09 BST 2017 armv6l GNU/Linux  Tried to update with force_board_rev=0x9000c1 in config.txt but to no avail. I had to return my board to the seller, who promptly confirmed it was a faulty board. If you can reproduce these signs for your board, it is likely faulty.\n"
},
{
	"uri": "http://jsyang.ca/cycling/moulton-automatic/",
	"title": "Modernizing a Moulton Automatic",
	"tags": [],
	"description": "",
	"content": "                             I\u0026rsquo;ve been obsessed with the design lineage of the Moulton bicycle ever since I got my first small wheeled folding bike: Bessie the Brompton. In mid-April 2017, a Moulton automatic appeared on eBay for 150 GBP with no bids and I decided I had to have it. I was the only bidder and minus another 60 GBP in shipping fees, it arrived at my doorstep from Stotfold, Bedfordshire.\nWhen the courier arrived with it the first thing I noticed was that it was quite long. I\u0026rsquo;ve read about the lengthy wheelbase, but exactly how long it was in-person was a shock to me. Picking it up revealed its weighty nature, and after a few short rides around the block, through the city center, and looping down by the University of Manchester, I decided in its current form it was not at all nimble like the Brompton. The resemblance was uncanny, however, and the ancestral design features which would land in the Brompton were all present: 16\u0026rdquo; x 1 3\u0026frasl;4\u0026rdquo; wheels, rear suspension, and riding geometry.\neBay seller photos   Ebay1\n      Ebay2\n      Ebay3\n      Ebay4\n     Impressions Its block brakes did not work well with the steel rims, and I knew this would be a problem in the wet if I was to use it in the wet environ of Manchester. Ultimately, the end goal was to have a high-gear ratio commuter that I could trust leaving locked up somewhere more than the Brompton. Though to make it more street worthy, its battered vintage parts would have to undergo some modernization.\nReplaced parts   Removed1\n      Removed2\n      Removed3\n      Removed4\n      Removed5\n     The modernization process The overall braking, rolling resistance, and acceleration performance of the stock wheels was quite underpowered. To improve this Brompton wheels would need to be sourced and refit onto the Moulton frame. The alloy rim surface along with modern dual pivot caliper brakes would not only be lighter, but also give back some control of the ride in wet conditions. I opted for single speed build, with no rear brake, modern Brompton dual-pivot front. While the rear 2-speed Brompton wheel had more or less the same dropout measurements, the axle length and OLN width was radically different for front wheel. Weight was shaved by nearly 4 pounds by shedding the old wheelset for the retrofitted Brompton wheelset.\nNew axles came in a front and rear pair for about 9 GBP delivered. brake. There was a mini-rack sold with the bike (manufactured from a Moulton seatpost downtube by John Bartlett), which was pretty but ultimately useless for carrying things, it had to come off. This left a gaping hole in the middle of the F frame that I plugged with a drilled out mudguard bracket and a reflector mount for a full-sized rack.\n  Rack hole\n      Rack\n      Wheelset\n     A 25.4mm quill stem was replaced with the oversized 1 1\u0026frasl;18\u0026rdquo; stem adaptor, allowing me to take advantage of the wider range of cockpit components that are sold today. The seatpost was 25.7mm replaced with carbon 25.4mm seatpost fitted with shims (some bad rides until electrical tape fixed the issue seatpost QR replaced with lighter steel bolt but that failed and had to be replaced with a standard M5 bolt and nut\n60 teeth front chainring fitted after cottered cranks and bottom bracket were removed and replaced with JIS square taper BB (shimano UN-51) Manganese lightweight pedals fitted to improve grip in wet: they held onto shoes with some steel studs. Brompton mudguards also fitted, and I had to drill out some of the rivets holding the stays to the guards to make them fit on the Moulton.\nSaddle is a Selle Italia SLR 125g, a great saddle for the value. Carbon handlebars were also installed: 25.4mm with carbon bar ends, the length cut down from 580mm to 360mm (slightly less than shoulder width). As a final improvement, Schwalbe Marathon+ tires where wrapped around both wheels to minimize punctures and maintenance.\n  Mudguard1\n      Mudguard2\n      New cockpit\n     Final configuration I\u0026rsquo;ve been riding this daily to and from work, it is both fast and nimble while handling like a full-sized (700c) bike due to its long wheelbase and full-suspension. Makes the commute a breeze, even in the rain! Total weight is approx. 12 kg.\n"
},
{
	"uri": "http://jsyang.ca/cycling/tiny-wasp-bike/",
	"title": "Building a tiny bike (Shrimpy)",
	"tags": [],
	"description": "",
	"content": "                             The base frame The foundation of the build was a tiny clown bike manufactured some time in the early 2000s under the name \u0026ldquo;Mikro-bike\u0026rdquo;. The marketing website from 2002, archived via WayBack Machine is available here. My particular bike came with a new seatpost and a worn rear wheel (solid rubber!) following years of enjoyment under its previous owner. It also had a coaster brake. The whole package was had for 30 GBP delivered.\n  Original1\n      Original2\n      Similar\n     Since the bike used all standard sized components (e.g. 1\u0026rdquo; threaded headset, standard full-suspension pivot sizing, etc.) it was quite easy to ponder the myriad ways it could be modified! I had a long think and quickly sketched out a design that appealed to me!\nIt had to have - pneumatic tires (solid rubber was far too heavy and bone-shaking to ride) - drop handlebars (because why not!) - semi-foldable element (makes for easy stowage) - longer wheelbase (the existing geometry was a bit too wheelie-friendly)\nExtra parts   12inchbentvalvetube\n      12inchblackjacktire\n      12inchwheelset\n      20inchfsframe\n      Foldingstem390mmlength\n      Kmcchain\n      Ntchaintensioner\n      Shortcrankset\n      N\u0026amp;T Single Speed Chain Tensioner 6.59 GBP\n KMC B1 Silver Chain 112 Links - 1\u0026frasl;2\u0026rdquo; x 1\u0026frasl;8\u0026rdquo; 5.73 GBP\n Messingschlager Crankset, 32 teeth steel black 100mm crank length 7.90 GBP\n 22.2mm folding quill stem (length 390mm) with 25.4mm handlebar clamp 14.00 GBP\n 12\u0026rdquo; wheelset with Velosteel single speed coaster brake hub \u0026ndash; ISO 203-19 34.12 GBP (14 teeth rear cog)\n 12\u0026rdquo; Schwalbe bent-valve inner tubes x 2 7.95 GBP\n 12\u0026rdquo; Schwalbe Black Jack tire x 2 7.38 GBP\n 20\u0026rdquo; full-suspension child bike frame 33.99 GBP\n  Final cost: 147.66 GBP or about 30 pints worth of beer, though I would say this project was more worthwhile than its beer equivalent!\nModifications done First round of modifications was done when the donor full-suspension frame arrived; it looked quite silly: The bike was fleshed out after the rest of the bits arrived!\n   Mod1\n      Mod2\n      Mod3\n      Mod4\n      Mod5\n      Mod6\n     Manchester Critical Mass The final part came just in time for the build to be completed for the June 2017 Critical Mass! Unsurprisingly it got quite some attention from everyone who had a glimpse. What was more odd was how easy it was to slip under the radar of other cyclists, even at critical mass speed, while riding amongst them; a lower silohouette than they\u0026rsquo;re used to looking out for?\n  Criticalmass1\n      Criticalmass2\n      Criticalmass3\n      Criticalmass4\n     More glamor shots   Fold\n      Hall1\n      Hall2\n      Rear1\n      Rear2\n     "
},
{
	"uri": "http://jsyang.ca/cycling/iow-2017/",
	"title": "Isle of Wight Randonnee 2017",
	"tags": [],
	"description": "",
	"content": "                             London Euston to Southampton, Cycle Island Tour Every year, the Isle of Wight hosts a cycling event which circumnavigates the island. As many of my friends in the various cycling groups I belong to were taking part in this event this year, it was only natural to join them on this unique free event. There were two routes: a 55 km and 100 km route. I thought I would do the longer route since I was still in the early stages of being acclimatized to long distances in the saddle.\n https://www.strava.com/activities/963200845\n\nAfter my long cycle from London to Cambridge to King’s Lynn, I would use the trip to put my new gear and methods in practice: bringing minimal kit that fit inside a small backpack:\n Long sleeved thermal shirt Vulpine Portixol — ultra-light rain and windproof breathable jacket Spare chinos Minimal repair kit:  1x spare inner tube 5x zip ties 1x axle wrench 1x tire lever 1x 500ml Platypus drink pouch 2x Skratch Labs powder mix sachets   In the early hours on the Saturday I took a train from Manchester Piccadilly to London Euston and set off from there down to Southampton for the ferry across to the Isle of Wight at about 9:30AM. The ride down took me through a sequence of small towns before arriving in Winchester and then Southampton not long thereafter. The route was more or less direct, taking some A roads and mostly B roads connecting these towns. A particularly nice route was an off-shoot out of Bentley coming to Binstead on a lane called “The Street”. Indeed, The Street offered perhaps the best combination of gentle rolling hills with little or no traffic all the way to Alton. In total around 30 min of uninterrupted smooth riding.\n   Compton\n      Farnham\n      Ferry\n      Forever train\n     After arriving in Southampton at around 5PM, I set course straight to the ferry terminal and to my surprise my friend Daniel Diaz was also waiting for the Red Funnel ferry. We had a nice chat waiting and then onboard before bidding each other farewell for the night as I retired to the booked Airbnb.\nCycle island 2017 The Airbnb host was a very nice man of about 73 years named George and he was also set to do the 100km route as well; we set off together with another guest of his who came in from Poland to ride the 55km route. After registering at the East Cowes start point, we met and chatted with some members of the London Brompton Club who were there for the tour as well!\n https://www.strava.com/activities/964606123\n\nThe weather was low for most of the day, with rain expected in around 2PM. Conscious of this, I set off ahead of the others as soon as we could. The route was actually unexpectedly hilly mostly with checkpoints every 10 miles (16km). These made for evenly spaced rest stops which forced the riders to pace themselves better. George and I rode for a few checkpoints until I eventually carried on at a pace he didn\u0026rsquo;t ride at.\nWe eventually formed a group with my friends Graham Parks and Alex Ooi (from the FW club) and carried on at an even pace. Rain set in near the Yarmouth checkpoint and I retreated inside the primary school for refreshments to wait the worst of it out.\n  Lbc\n      Pizza\n      Stamps\n     Riding consistently and, in some sections, with a gentle tailwind, I was able to make it to the last checkpoint at East Cowes for 3:30PM in the afternoon. The others came in not long prior and we all planted ourselves in a pizza shop for a well deserved delicious pie. In all my experience of the day was an excellent one and this FREE cycling event gets my highest recommendation for anybody who enjoys a good route at your own pace with the banter of hundreds of other riders throughout the tour.\nSolid 10\u0026frasl;10 weekend.\n"
},
{
	"uri": "http://jsyang.ca/cycling/suoman-commute-machine/",
	"title": "suoman commute machine",
	"tags": [],
	"description": "",
	"content": "                             A Budget single-speed build @suoman was having real issues with her 100 quid department store bike so I decided to chip in and get her something better especially after hearing how nice it would be to own a racing-style-not-so-heavy-bike.\nI had a think and came up with a budget (\u0026lt; 120 GBP total) for her new ride. In addition to being as cheap as possible while being a decent bike, this new bike need to: - have better brakes than current bike - be more easily maintainable than current bike - be more lightweight than current bike - mount a rack for carrying panniers - look cooler - be more fun to ride\nThe Base  Found a Jamis Beatnik 2014, frame size 47 cm Bought from ebay for a measly 40 GBP (9 GBP for Uber ride to go collect it) Gearing is 46t x 16t on 700c x 25x wheels, giving it a total of 83 gear inches (a high gearing) Frame is 1040 steel Very good condition, only scratched paint Came with a sad looking \u0026ldquo;Viscount Seagull\u0026rdquo; saddle which was quickly replaced 700x25c wheelset (25-622), tires are Vittoria Zaffiro, rims are ALEXRIMS IDI9     Old1\n      Old2\n      Old3\n     Frame geometry    Measurement Value     Size (cm) 47   BB Height 275   Chainstay 405   Fork Offset 45   Head Tube 95   Head Tube Angle 71.5   Seat Tube (C-T) 470   Seat Tube Angle 76   Standover 745   Top Tube (Effective) 508    Customizing it for the rider I had to make a few additions and replacements to the base:\n saddle for medium to large hiny, used is OK! large pedals with good bearings, used is OK! drop bars, lighter weight the better, used is great! 25.4mm diameter clamp streamliner rack for handsome looks! LED bar ends for extra visibility at night!     Final cost\n      Final view2\n      Final view3\n      Final view4\n     Result She likes it, brilliant!\n  Tweet1\n      Tweet2\n     "
},
{
	"uri": "http://jsyang.ca/art/polymer-clay-2017/",
	"title": "Polymer clay sculpting",
	"tags": [],
	"description": "",
	"content": "                             Petite Little Red Riding Hood After building Del a red mini-velo (named Little Red Riding Hood) last year, I thought I\u0026rsquo;d follow it up with a smaller version of the small bike as a gift during our first clay session. Having purchased a heat gun recently, I experimented with baking the pieces individually on a low heat setting, then joining them with industrial strength cyanoacrylate super glue. Here\u0026rsquo;s how it turned out:\n   Plrrh 1\n      Plrrh 2\n      Plrrh 3\n      Plrrh 4\n      Plrrh 5\n     As you can see some of the pieces received uneven heating (more patience with the heat gun would\u0026rsquo;ve helped this) and began to bubble. None of the pieces were scorched however, which is something that had happened previously when a toaster oven was used for baking. I modeled the front brake caliper, the forks, the Brooks saddle and the cranks in finer detail, after constructing an armature for the wheels, handlebars, and frame out of aluminium wire.\n"
},
{
	"uri": "http://jsyang.ca/cycling/norfolk-nobbler/",
	"title": "Norfolk Nobbler 2017",
	"tags": [],
	"description": "",
	"content": "                             London to Cambridge to Hunstanton to King’s Lynn The first long ride of the year was done with the London Beer and Bike Group; leaving from Bernie Spains Gardens in Southwark, the route was to take us to Cambridge via the canal towpaths in the east end of London and through Ely onward to King’s Lynn and to the beach at Hunstanton.\n https://www.strava.com/activities/905771639 \nNew options for storage: Carradice SQR Trax A new piece of kit was mounted onto Bessie the Brompton for this route to see whether it was worthwhile having the extra carry capacity: the Carradice SQR Trax bag with SQR mount. I bought this off eBay; an ex-display item (40 GBP) plus bracket direct from Carradice (for 20 GBP), totaling 60 GBP.\n  Trax setup 1\n      Trax setup 2\n     Officially it sounded nice enough: lots of storage at 16L hold volume, and wasn’t too heavy by itself. As the saying goes: \u0026ldquo;nature abhors a vacuum”- and the bag was filled with all sorts of needless weighty items “just-in-case”. Contents that ended in the Trax bag included: one tube, multi-tool hex wrench (unused), a spare shirt, spare shorts, sealskinz socks, other junk food items acquired and accumulated from visits to gas stations.\nThe bag was good for soaking up road spray and mud that could have ended up on my pants, however a rear mudguard would be a lighter solution to that problem. I think a better solution would be to use the jersey rear pockets (1 x Large, 2 x Small) to carry a reduced set of easy to access items. Everything else could have gone into a Jansport bum bag ($30 CAD).\nIn all, the impression of the set up was that it would not do for long distance rides. The arrangement fought against a more practical, lightweight approach to packing.\nEn route My original plan was to ride with LBBG until Kings Lynn and split off to Lincoln where I had a pre-booked Airbnb waiting. Then from Lincoln back to Manchester but it proved too much distance this early into the year. Needed to do longer rides more often for such ideas to be realistic.\nThe ride to Cambridge went quickly with minimal stops: a few beer / snack breaks, and two mechanicals. After plodding through an unpaved country path.\n  Pub stop\n      Ride1\n      Ride2\n      Just a little bit further   Strava1\n      Strava2\n      Strava3\n      Strava4\n      Strava5\n      Strava6\n     Weather proved to be good for the majority of the route, slightly drizzling after Cambridge. The timed arrival into Cambridge and Kings Lynn meant that we missed most of the rain, and caught very light winds: mostly a tailwind into Kings Lynn.\nRiding the Hunstanton loop from Kings Lynn with the remnants of the initial group was the eventual outcome: having good company is key on longer rides. I too tired to cycle the extra 110 km to Lincoln after that and ended up taking a series of trains there.\nNew drink unlocked One of the riders gave me some of his Skratch-Labs infused water (isotonic drink) when my own water supplies ran out. 3 hours from the end of the ride, I hit a “second-wind” that gave me the strength to keep up with the group leader. At the time, I thought that had come from eating a mouthful of digestive cookies 20 min prior. As it turned out the real cause was my body’s absorption of the Skratch Labs water. After the ride, I ordered a few packets of it from Amazon to give it a proper trial and review for myself.\nIssues with long rides Saddle soreness remains the major issue I face on long rides (\u0026gt;200km). The current set up on Bessie the Brompton is a titanium seat post with a Selle Italia Carbonio SLR saddle, and a firm rear suspension block to match. Perhaps a better fit might be found in lyrca underwear or maybe even try padded shorts.\n"
},
{
	"uri": "http://jsyang.ca/hacks/bike-bell-mod/",
	"title": "Cheap Bike Bell Modification",
	"tags": [],
	"description": "",
	"content": " Having bought a bell similar to this one quite a while back for roughly (5 GBP), I\u0026rsquo;d seen how well it worked very loudly and clearly as a bell. Unfortunately, using the bell as a handlebar attachment is less than stellar due to its flawed strap design:\nThe steel strap which comes with it, leaves a large gap and owing to that, the bell has a tendency to spin around when you hit the slightest of bumps. Worse yet, if you hit a pothole hard enough, there is a chance the whole bell comes off completely because it\u0026rsquo;s retained by string friction with T shaped ends on the strap locking into a free-floating metal plate!\nTo make it work as it should, shims are needed to fill those gaps. Obviously this is less than ideal since the shims can slip and the bell can fall off once again.\nThe fix The solution is always quite simple when you have the tools and material at hand: in this case, it was a 9\u0026frasl;64\u0026rdquo; drill bit and a short releasable zip-tie.\nAll that was required to make the tie fully strap in, while being adjustable to the diameter of any handlebar was the releasable zip-tie, through which a hole was drilled for the bolt to screw into. The bell itself sits on this bolt and is fastened to the same metal plate that holds the striker as illustrated:\nEt voila! It now functions correctly and is more adjustable, less easily lost and lighter weight than the original! Another good hack!\n"
},
{
	"uri": "http://jsyang.ca/cycling/mcr-critmass/",
	"title": "Manchester Critical Mass February 2017",
	"tags": [],
	"description": "",
	"content": "                             I hadn\u0026rsquo;t been in town to join critical mass since moving to Manchester in Sept 2016. Finally free of obligations in London for the last Friday of the month, I decided to join fellow cyclists for Critical Mass.\nI ordered some of these 10 meter LED fairy lights (7 GBP) off Amazon a while back for our flat and they were conveniently USB powered. This was perfect for wrapping Bessie the Brompton up in and for pooting around town (with many happy onlookers!).\n   1st\n      2nd\n      3rd\n      4th\n      5th\n     Strava activity and photo blog  In total, we rode 11 km. Someone else was great enough to stop occasionally to get photos of all the riders throughout this ride; those photos can be seen here.\nGreat ride, hope to do another soon!\n"
},
{
	"uri": "http://jsyang.ca/games/celcom/",
	"title": "Celestial Combat",
	"tags": [],
	"description": "",
	"content": " Development in progress! Originally written as a way to experiment with vector graphics in PixiJS. It has since formed into a complete game. Celestial Combat is a game of galactic trade, colonization, and conquest.\nExcerpt from \u0026ldquo;How to play\u0026rdquo;  You begin with either an invasion fleet (1 x Fighter + 4 invasion Freighters) or a single occupied planet.\nTo colonize planets, you must land on them when they are unoccupied with your Fighter. The landing will plant a beacon, starting the flow of Freighters and raw materials sent to construct facilities on the planet.\nTo win, you need to destroy all enemy production, combat facilities, and spacecraft.\n It fully supports gamepads and has its own game assets packing / loading system.\n Play Celestial Combat Play Celestial Combat with Gamepad support  Gameplay   "
},
{
	"uri": "http://jsyang.ca/art/particle-tracks/",
	"title": "Particle Tracks",
	"tags": [],
	"description": "",
	"content": " Wrote a little procedural art widget drawing inspiration from bubble / cloud chambers used to study particle trajectories. This toy makes use of the excellent scrubbing dat.GUI library to change initial values.\n  Live play  Source code "
},
{
	"uri": "http://jsyang.ca/art/pewpew/",
	"title": "PewPew.js",
	"tags": [],
	"description": "",
	"content": " I wrote this toy during a particularly long and unproductive meeting that I couldn\u0026rsquo;t leave. Turn almost any web page into a shooting gallery with a click of a button.\n  Source code "
},
{
	"uri": "http://jsyang.ca/art/cellular-automata/",
	"title": "Random Cellular Automata",
	"tags": [],
	"description": "",
	"content": "                             This is a toy script that generates a random 2D celluar automata ruleset and applies it to a randomly generated world with each run of the web page. You can click on the viewport to reset it with a completely different universe, starting population and rules for the universe.\n Some universes are more stable than others, which may last for only a few cycles before all the cells die off. Some can converge to an interesting pattern or have some other sort of emergent behavior.\n   1st\n      2nd\n      3rd\n      4th\n      5th\n     Source code "
},
{
	"uri": "http://jsyang.ca/cycling/free-spirit-single-speed/",
	"title": "Free Spirit Single-Speed Conversion",
	"tags": [],
	"description": "",
	"content": "                             My parents purchased a pair of old road bikes from the mid/late 70s in relatively good condition for their age before the family moved to Toronto (around 2011). The bikes were both \u0026ldquo;Free Spirit\u0026rdquo; branded machines that were apparently sold as lower-end bike shop bikes rather than department store bikes: they were relatively well built and had good components fitted to them.\nI believe my mom got them both for $50 CAD at the time, which is quite a bargain! Of the pair, one was a men\u0026rsquo;s bike (being a larger diamond frame) and the other was a women\u0026rsquo;s bike (with a step-through frame), which I\u0026rsquo;ll call WB from now on. My sister repainted this frame some years ago and began the single-speed conversion but never finished it.\nAs I was back in Toronto for some months in March 2016, I thought it\u0026rsquo;d be nice to give them both a nice clean and finish the conversion on the women\u0026rsquo;s bike.\nMakeover    1st\n      2nd\n      3rd\n     WB had a set of drop bars and an old \u0026ldquo;suicide-lever\u0026rdquo; style brake lever. I swapped these out for a classic dutch-style U handlebar and an modern alloy lever for the front-brake.\nIt took me a while to figure out that WB also had a Uniglide freehub which held a 5-speed cassette cluster on it, all of which would be unused after the single speed conversion. Took them out by dual-wielding chain-whips since the smallest cog held them in place. Filled in the hub with spacers and made sure the chain-line was straight.\nAfter I put some Lizard Skin grips on the bars, it was ready to ride! Total spent: $60 and about 20 hours.\n   4th\n      5th\n     "
},
{
	"uri": "http://jsyang.ca/cycling/dahon-classic-v/",
	"title": "Dahon Classic V",
	"tags": [],
	"description": "",
	"content": "                             First released to the public in 1982, it came in single-speed, 3-speed internal gear hub (IGH), and 5-speed derailleur options. Having the smallest fold in a production bike at affordable prices, it became an instant consumer hit. The original design itself lived on for a number of years into the 90s.\n  Before 1\n      Before 2\n      Chainring size\n      Dahon line drawing\n      Early dahon ad\n     Compared to the Brompton The Bad Stuff  fiddlier fold process (5 steps vs 3 steps for the Brompton) a bit rough around the edges in terms of braking (under powered side-pull calipers and pads, though the Brompton Mk I and II suffered from the same) complex frame structure (folding stem is secured by a diagonal strut that locks into a ring, allowing the stem to pivot normally) appreciably heavier lack of cable management more moving parts = more potential points of failure  The Good Stuff  weird little fold away caster wheel (acts as a third wheel to prop up the folded bike) smoother ride due to fatter 47-305 tires (vs 349 tires on the Brompton) 15% the cost of the Brompton comes with kickstand, rack, and mudguards by default very sturdy: frame is completely overbuilt  Verdict: no match to fill the workhorse niche, but it\u0026rsquo;s a solid contender in the fun department.\nUnusual mechanical details Folding caster wheel   Caster wheel other 1\n      Caster wheel other 2\n      Caster wheel\n      Caster wheel\n      Dahon landing gear folded\n      Dahon landing gear\n     There seems to be a modern descendant of this accessory, currently sold as an add-on part: the Dahon Landing Gear. (last 2 photos)\nSee it in action here: https://www.youtube.com/watch?v=_hT-j6luNso\nExtra: There seem to be a few instances where people have added their own caster wheel to other Dahon bikes that did not include them as part of the base.\nTelescoping stem and seat-post Stem locking strut   Locking strut 1\n      Locking strut 2\n      Locking strut 3\n     \u0026ldquo;Knuckle\u0026rdquo; hinge with detent for main frame   Knuckle hinge 1\n      Knuckle hinge 2\n     Handlebar angle I quite like the angle of this bar, it\u0026rsquo;s flat mounted but with just a slight angle that allow the wrists to rest in a more comfortable position. This angle is uncommon amongst modern bikes and has a certain pleasing aesthetic to it.\nFrame serial number This particular bike\u0026rsquo;s frame number is A094418. It was manufactured in Taiwan in the 1980s:\n Over the years there have been some other systems and lettering. A certain amount of Taiwan made bikes in the 80s will have a serial number starting with A.\n Additionally, the 5-speed cassette it was manufactured with is a Shimano MF-Z012 which is a freewheel that can be removed with the Park Tool FR-1. Or for the more adventurous individual, there is a possibility of reusing the freewheel body as this model is confirmed to be a second-generation Uniglide freewheel (which means the outermost cog doubles as a lockring). I\u0026rsquo;ve dealt with Uniglide hubs before in my rebuild of the Free-spirit single speed conversion.\nDownload the 1990 Dahon service manual  .red {color: red} .green {color: green}  Modified details 1. Seat post locking insert for cannibalized Brompton seatpost\nI wanted to fit the 31.8mm OD Brompton seat-post since it was significantly lighter than the heavy steel telescopic seat-post that came with the bike. As it turned out the seat-post insert for frame couldn\u0026rsquo;t accommodate the transplant (Dahon stock seat post diameter is 33.9mm). I had to insert a shim which I cut out of a HDPE milk jug. After shaving some circumference off the insert, the resulting product was perfectly functional and worked without slipping while sat on the new seat-post.\nI suspect this hack would require a bit more work to support a heavier rider (\u0026gt; 80 kg).\nInterestingly, due to the beefy thickness of the steel, the removed telescopic stock would make an excellent club in case anybody wanted to steal your ride. :)\n+ £0.00 (donated Brompton seat-post) (397g seat-post vs 875g telescopic seat-post) reduced weight for minimizing moving parts\n2. Minimal carbon fibre saddle\nOn a bike with a less upright position this modification would\u0026rsquo;ve been unacceptable since the saddle is incredibly stiff and uncomfortable without padded shorts. But here, it holds well since the stiffness is mostly transferred properly to the sit bones for the Dahon Classic V\u0026rsquo;s riding style: well worth the reduced weight.\n+ £53.17 (92g saddle weight)\nI ended up replacing that saddle with a Selle San Marco with titanium rails. + £10.00 (230g saddle weight) added weight for comfort\n3. Brake pad replaced\nStock brake pads had a very old rubber compound that was no good for fast stops; they needed to be replaced to ensure a safe ride.\n4. Mudguards, caster wheel, rear-rack, rear brake caliper + lever, and derailleur removed\nThis was done strictly as a single speed conversion with weight reduction as the primary goal. The only gear I found myself using was the already the highest gear, even up hills. There would be no point in having any lower gears given the amount of weight that incurred.\nThis highest gear ratio is composed of 52 teeth in the front with 14 teeth in the rear sprocket. The wheel size is ETRTO 47-305 (16in x 1.75in), giving the Dahon Classic V a maximum of 60.54 gear-inches.\nAdditionally, the rear brake was beyond useless with its ancient rubber pads. The rear brake accounts for around 10% of the braking force so it was a good trade off to remove the brake, cabling, and lever in exchange for some reduced weight (less mass on the bike means slightly more effective braking in the front brake).\nFurthermore, since I was able to swap in the Brompton standard steel seat-post, I found I could still prop the bike up while it was folded by pushing the seat post to its maximum depth: this allowed me to remove the folding caster wheel mechanism with confidence.\n(1800g removed components\u0026rsquo; total weight) removed weight for poorer coverage in wet conditions, less cargo functionality, and less gearing options\n5. Crankset\nThe stock bottom bracket (standard 68mm shell) and crankset are American sized bottom brackets. The cranks are one-piece and forged out of heavy steel which means swapping it out for a three-piece crank should save a lot of weight!\n6. Removable pedals\nStock pedals did not fold on the right hand side: folded dimensions were much larger than they could be. I purchased a pair of Wellgo Quick Release M138 pedals which are similar to the MKS EZY-E pedals I put on my Brompton, the only functional difference are the more pronounced studs on the pedal which will help my feet stay on in wet conditions. Unfortunately I could not immediately use the removable pedals because the threading and the bolt on the stock pedal and the crank arms were about 1mm small in diameter. Although the wrench size to loosen the pedal was the standard 15mm. The only way to use these pedals is to replace the crankset.\n+ £28.40\n330g M138 pedal weight vs 320g stock pedal weight added slight weight for a better fold + better security\nModification result: version 1   After 1\n      After 2\n     Additional modifications in 2017 I was eager to try out the Dahon again after some new mods early in 2017. As I had moved to Manchester at this point, I decided to try out the Fallowfield cycle route with @suoman.\nRiding it had several distinct feelings: the bike had a tendency to eject rider due to upright position and short wheelbase. The cycle trail included a few sections of cobblestone paths where gaps between the stones, combined with the ejection tendency, posed a major problem to keeping the bike upright. I would recommend replacement of stock tires and wheels if you plan on riding on uneven and slippery surfaces, though tire selection can be sparse with this size (16in x 1.75in).\n+ £30\nI added a 33.9mm x 580mm carbon fibre seat post for 30 GBP. This part significantly reduces the weight compared to the telescopic steel seatpost that was there before. reduced weight\n+ £27.21\nAlso added was a 60t chain-ring, which gives a new ratio of 60t x 16t x 16\u0026rdquo; wheels for a whooping 50.5 gear-inches. This squarely puts the bike into the dark horse territory as it is both able to maintain high speed due to the 60 tooth ring and accelerate quickly given its small wheel size. increased top speed\n+ £15 crankset\n+ £17 bottom bracket American-to-Euro adapter\n+ £15 bottom bracket\nTo replace the one-piece crankset, I had to remove some excess material within the seat-post tube to make a cartridge based Shimano BB-UN55 Bottom Bracket (68 x 107mm). After doing that, I fitted a set of Stronglight Mygal cranks. reduced weight, increased gearing options, easier maintenance\nModification result: version 2   After v2 1\n      After v2 2\n      After v2 3\n      After v2 4\n      After v2 5\n      After v2 6\n     A pretty looking bike with a very much lightened total weight of 11.06kg.\n"
},
{
	"uri": "http://jsyang.ca/tools/gpx-mapfactor/",
	"title": "GPXMapFactor",
	"tags": [],
	"description": "",
	"content": " \nRoute-Importer for MapFactor doesn\u0026#39;t work :( Have to write my own...\n\u0026mdash; Jim (@spacefishing) June 30, 2016  \nWrote a small tool to convert and insert waypoints from a GPX route into a MapFactor Navigator route.\nMapFactor Navigator is an offline turn-by-turn navigation program you can stick on your phone. Was going to cycle from Leicester to Cardiff on Friday but instead got really sick and wrote this program.\nIt\u0026rsquo;s good for planning long cycle routes (I do it through Brouter, but you can use Googly maps) and then loading them into the navigator so you\u0026rsquo;re covered in case you miss a turn and need to re-route in an area with a bad / non-existant cell signal.\nAs Route-Importer for MapFactor failed to work on my Android Marshmellow device, I had to resort to writing my own GPX convertor for long cycle rides.\n https://github.com/jsyang/gpxMapFactor  Routing issues This was the original route planned by Brouter using OpenCycleMap data: around 232 km.\nInserting a route with 5000 waypoints crashed Navigator so I decimated the down to 900 waypoints. Was able to show them on the map but crashed any time it tried to calculate a route.\nTrimming down to 250 waypoints it could more easily handle the load.\nLeicester-Coventry-Gloucester-Cardiff on 01/07/2016 This ride, which I\u0026rsquo;d planned earlier in the week, didn\u0026rsquo;t end up happening due to sickness that weekend. Maybe later\u0026hellip;\n"
},
{
	"uri": "http://jsyang.ca/cycling/london-cambridge-leicester/",
	"title": "London-Cambridge-Leicester",
	"tags": [],
	"description": "",
	"content": " Inbound to Cambridge from London We started off at city hall as an FW-club ride. And took one of the more direct and least elevated routes to Cambridge. Stopped 30 km short of Cambridge for lunch and a pint at a local pub. When the group got in, they settled into their YHA rooms and I checked in at my AirBnb. A pleasant ride especially after the late night on Friday.\n    Stat Total     Distance 95.1km   Moving Time 4:12:15   Elevation 368m   Estimated Avg Power 101W   Energy Output 1,528kJ   Calories 1,704   Elapsed Time 8:11:38   Avg Speed 22.6km/h   Max Speed 66.2km/h      Outbound from Cambridge to Leicester After a great night\u0026rsquo;s food and rest, I was all recuperated and ready to begin the long ascent back home to Leicester from Cambridgeshire. Unluckily for me, I picked one of the worst days to ride to Peterborough, through which, the Tour de Cambridge cycle race was routed through. Trying my luck at every junction through to P-town, I eventually made it through the blockades with the help of a sympathetic race official. My reward was not only a great many heckles from the townsfolk, but also a few glimpses of the tête de la course. After a re-energizing lunch at Whittlesey, Bessie and I headed into Peterborough.\nThere was a momentary stop at a cash and carry in Peterborough to gather some fruits and sources of glucose. I must have ended up eating over 12 bananas\u0026hellip;\nFrom then on, it seemed there was an unrelenting ocean of hills that awaited me until my final descent home in Leicester. After many slow climbs and rapid descents totaling a 12 hour tanning session on the bike, it was nice to finally be home for a warm shower and some light supper.\n    Stat Total     Distance 160.0km   Moving Time 7:59:59   Elevation 757m   Estimated Avg Power 85W   Energy Output 2,458kJ   Calories 2,741   Elapsed Time 12:33:22   Avg Speed 20.0km/h   Max Speed 129.2km/h      "
},
{
	"uri": "http://jsyang.ca/cycling/equipment-upgrades-2/",
	"title": "Equipment Upgrades",
	"tags": [],
	"description": "",
	"content": " Upgrades to Bessie the Brompton Getting a Brompton brought me into whole new level of cycling. When I first got Bessie (the Brompton), the first thing I noticed was how little bike there was compared to how fast it could pick up speed. It was the next best thing to having a personal jetpack.\nYou see less of the bike in the cockpit. You feel less of the bike because a Brompton\u0026rsquo;s center of mass is lower, and you accelerate much much faster owing to the interplay between its smaller wheel size (16\u0026rdquo; x 3\u0026frasl;8\u0026rdquo;) and a higher gear ratio.\nThat nimble character lent gave me the feeling that I\u0026rsquo;d just relearned how to cycle again.\nAs time goes by, the ride becomes more familiar and the rider more knowledgeable about some of the variables of the experience. Upgrading is a means to introduce new variables to keep the sport or lifestyle interesting and to extend the traits of the bike that matter the most to the rider and the kind of riding done.\nQuite some fistfuls of hard earned cash have been sunk into upgrades purely on the bike itself.\n   As-is Upgraded Cost Weight saved     50t chainring on a pre-2013 crankset 54t chainring on a spider crankset 110 GBP ~320g   cut down aluminium riser bar cut down carbon riser bar 19 GBP ~100g   old-style brake caliper 2013 Brompton calipers 30 GBP ???   standard steel seat-post Hylix carbon seat-post 50 GBP 250g   1 x Brompton kevlar front tire\n1 x Schwalbe Kojak rear tire 2 x Schwalbe Kojak tires 40 GBP 400g rotational mass   Wellgo M-20 pedals MKS MT-EZY pedals 34 GBP -50g    Upgrades to outerwear It\u0026rsquo;s common knowledge that drag force increases as speed increases. The most effective way to negate these effects are to wear clothing that induces the least amount of drag due to wind resistance.\n"
},
{
	"uri": "http://jsyang.ca/cycling/dels-red-minivelo/",
	"title": "Del&#39;s Red Minivelo",
	"tags": [],
	"description": "",
	"content": "                             A minivelo is a type of small wheeled bike with a standard road bike geometry and smaller sized wheels. Typically, they are non-folding and fill a niche in between full-sized road / city bikes and folding bikes. Simplicity is the order of the day with most minivelo designs.\nI spent some time back in Canada in spring of 2016 and wanted a bike project with which I could surprise my wife (then girlfriend). Budget was set at no more than $200 Canadian and red being one of her favorite colors, I soon found myself browsing eBay and Kijiji.ca for frames or bikes that would fit that mold.\nAfter chancing upon someone\u0026rsquo;s ad for almost unridden example of a minivelo originally from this Montreal city tour company, I arranged a meeting and forked over $110. Just a few tweaks from the sold as-is configuration would turn it into the final form that I was after.\n  View1\n      View2\n      View3\n     DYAD minivelo The desired gearing was set to 48t x 14t, not too large a gear for 20\u0026rdquo; wheels, but not too small either, to keep up with UK city traffic speeds. Bike came with a single chain-ring in the front, which I would leave alone. Instead I would end up swapping out the rear cassette for a single-speed sprocket of 14t or 63.98 gear inches, giving a speed of 15.23 mph at 100rpm.\n 25.4 mm seatpost diameter 25.4 mm handlebars diameter Wheel size was 20\u0026rdquo; x 1.75\u0026rdquo; or ISO 406 sizing  It was to have a look similar to this mini-velo sold here but at a cost less than the advertised 400 EUR.\nModifications I removed nearly all the extraneous parts off the bike to make it as simple as possible, this would be everything save the front brake. They were also replaced with better levers and caliper brake pads.\nThe rear cassette took some work to get off as it was an older make Shimano screw-on 5-speed freehub, similar to the Uniglide / Hyperglide hubs sold in the 80s and 90s. It was replaced with a £6.85 14 tooth single-speed \u0026ldquo;Dicta\u0026rdquo; freewheel off of eBay.\nBy sheer luck I was also able to source a broken in Brooks B17 saddle for $90 along with a 25.4mm riser bar that I then chopped down to about 280mm length. Transplanting non-removable Wellgo pedals from the Brompton, I was able to shave some weight off the pedals as well.\nTo top it off, I added an Interlock seat post that serves as an casual protection mechanism.\nLittle Red Riding Hood To show off the final product, I took it for a road-worthiness ride around the Lakeshore trail in Toronto.\n  After1\n      After2\n      After3\n      After4\n      After5\n     She was very happy with it! Update 27/11/2016: Del\u0026rsquo;s other bike was stolen from the Liverpool train station so she\u0026rsquo;s had to use Little Red Riding Hood in the interim. Carrying it up 2 flights of stairs everyday is something that would not have been possible with her previous bike.\nUpdate 22/03/2017: With some encouragement from Del, I started to dabble again in polymer clay sculptures: the product of the first session was a petite model of Little Red Riding Hood\nEffective Top Tube Length A visitor to the page inquired about the bike\u0026rsquo;s effective top tube length to help him make a buying decision on the fit of the bike. As you can see the ETTL is 52cm.\n"
},
{
	"uri": "http://jsyang.ca/tools/slackson/",
	"title": "Slackson bot",
	"tags": [],
	"description": "",
	"content": " I wrote a Slack bot that controls and reacts to the state of Sonos controllers on your network. It can send GIPHYs to the channel as well as analyze the sentiment of the lyrics of the current song.\n jim [5:35 PM] whats playing sonosbot BOT [5:35 PM] `The Avener \u0026amp; Phoebe Killdeer - Fade Out Lines - The Avener Rework` jim [5:35 PM] pause sonosbot BOT [5:35 PM] `jim requested to pause this track.` jim [5:35 PM] play sonosbot BOT [5:35 PM] `jim requested to continue playing music.`  Running You will need to provide your own credentials within config.js, a sample-config.js is provided as an example. The bot server must run on the same network that hosts your Sonos devices.\nnpm install node bot.js  Source code You can find the latest version on GitHub.\n"
},
{
	"uri": "http://jsyang.ca/cycling/cycling-2015/",
	"title": "Cycling in 2015",
	"tags": [],
	"description": "",
	"content": "                             Biking since moving to London UK Cycling has always been a way for me to get around and explore places nearby but out of walking distance. After I moved to London, the first few weeks were fairly boring in spite of the extensive means of public transit offered by the city. City-hire bikes were available but they are not exactly enjoyable to ride.\nI held off from buying a bike straight away because it was quite expensive to purchase a cycle in London. I had to ration the cash, as I arrived with only a fistful of pounds to cover the rent, bills, and all other expenses before my first few paychecks. In hindsight, it was and still is cheaper to get around the city than to rely on other kinds of transit.\nI went as far as ordering a quick-access bike hire key and used it for a few days before relenting and decided that I would need to buy my own bike. My first bike was purchased in April 2014. A 100 quid steel beast from the Argos catalog that I promptly named \u0026ldquo;butch\u0026rdquo;.\nArgos Challenge Crusade Hybrid   Argos butch like1\n      Argos butch like2\n     Though weighty, its anemic 6 gears served me well and I rode several 100km rides (including my first London to Brighton ride). More importantly it allowed me to confidently explore the new city and I even joined a few casual IBikeLDN rides to engage other people in the cycling community. It was a beater bike, plain and simple. I didn\u0026rsquo;t have to lose sleep over thieves, vandals, or other unsavory elements as I left it locked around London.\nIn February 2015, after the saddle had lost most of its lining through a tear, its headset coming loose, and after suffering another puncture, it was apparent that I was due for a new (to me) bike. Spending more money than the initial purchase price to maintain a beater bike didn\u0026rsquo;t make sense to me; a second hand 2007 Specialized Sirrus from BikeWorks was to be that next bike. It came with an easily indexable set of derailleurs, a (surpise) carbon fork, and 24 gears total for around 200. A great bargain for a noticable improvement over butch.\n  Sirrus1\n      Sirrus2\n     LBBG I found the London Beer and Bike Group through the IBikeLDN mass rides. As per the name, it\u0026rsquo;s a casual cycling group that may or may not imbibe fermented wheat drinks as part of a ride. This is the group I found myself riding with most often. I was convinced not only by the friendliness of the other riders but also the fact that there were specific training rides for the Dunwich Dynamo (180 mile night ride) that include many places far outside of London. The long weekend rides usually come in the long format and are, for me, a great way to go from within London out to discover the ambience and character of places that aren\u0026rsquo;t London. Great fun.\nMeeting different people within this group gave me the chance to appreciate the different styles of riding, different styles of bikes and different ways of interpreting the world on two wheels. Sounds a little cliche but the fact of the matter is that I learned to appreciate and ultimately adopt the bicycle as more than just a vehicle to get me from A to B. It is a statement; in the same way that people might express themselves through T-shirt designs, you could say that a bike is an individual expression.\nA few people would occasionally show up to these longer rides with these dinky little folding bikes which would never fail to draw at least a few sniggers from the more \u0026ldquo;serious\u0026rdquo; riders. Pretending to be more of a \u0026ldquo;serious\u0026rdquo; rider myself, it seemed like I felt the need to react in the same way but I couldn\u0026rsquo;t do it. There was something elusive about folding bikes. Something worth deeper appreciation.\nFolding bikes My friend Andrea Woelke was part of the group who were enthusiastic about welcoming people \u0026ldquo;into the fold\u0026rdquo;, so to speak. I broached the subject of owning a folding bike after seeing Bromptons over-represented (vs other folding bikes) in the city and he was only too happy to make suggestions and give advice on what models to purchase. Initially, I wanted to go the economical route and buy a junker folding bike, then upgrade to the Brompton, which is the absolute top model of the category. Thankfully, I bit the bullet and allowed common sense to override this idea because as with most things, paying for a quality product up-front saves you trouble later down the line.\nOff I went to search Gumtree. In no time, I found a particular bike satisfactory: single-speed, without the weird M style handlebar and with a decent seat on it. I splashed out 560 GBP for it. She would be named Bessie.\n  0th\n      1st\n      2nd\n      3rd\n     The seller had posted the ad recently and I felt that particular bike was different enough and cheap enough to be The One. Later that weekend we exchanged emails and agreed to meet for the money-bike swap. I have to admit, I was a little apprehensive on that day but when the Italian rolled that Brompton out there was no turning back. I hopped on and folded and unfolded it several times. If my memory was correct, there were no other words after that. I rode away.\nRiding it back from Queens Road in Peckham as an absolute treat. I can only describe it as exhilarating as flying through the streets on rocket powered roller skates. The simplicity of single speed with the total lack of cockpit controls and diminished frame size made it feel as though I wasn\u0026rsquo;t even riding a bike. It was as if I was somehow gliding along the ground and my legs performing a pedaling motion by sheer coincidence. Completely reinvigorating.\nFirst upgrade to Bessie: added bar ends for changing hand and wrist positions during long rides. Makes the bike a bit more aggressive looking as well.\nUpon becoming completely enamored with the fun machine, I also decided to join the crowd and log all my rides via Strava.\nCompany holiday to the Netherlands Our company took us out for a weekend summer holiday in Netherlands. Spent 2 nights on the Ijsselmeer with Bessie in fold. Snuck out for a midnight ride from Enkhuizen to Medembljk loop (30km roundtrip). The boat captain thought the trip was a bit kooky.\n  Bessie netherlands1\n      Bessie netherlands2\n      Bessie netherlands3\n      Bessie netherlands4\n      Bessie netherlands5\n      Bessie netherlands6\n      Bessie netherlands7\n      Bessie netherlands8\n     London to Isle of Grain The route was around 98km one way with a train back into London.\n  Isle of grain1\n      Isle of grain2\n     London to Windsor/Legoland to London Great day, sunny throughout. Warm temperatures made the beer and food stop a pleasant affair. Entire loop was about 120km.\n  Windsor legoland1\n      Windsor legoland2\n      Windsor legoland3\n      Windsor legoland4\n     May Planespotting Ride A quick weekday trip after work from Marble Arch to a field near Heathrow Airport and back into the city!\n  Planespotting1\n      Planespotting2\n      Planespotting3\n     Dunwich Dynamo Rode 185km from London Fields to Dunwich Beach as part of the annual Dunwich Dynamo. Stayed overnight at a nice bed-and-breakfast and explored the surrounding areas before riding another 190km back to London. This was my longest ride yet.\nThere\u0026rsquo;s something to be said for the ambience of a night ride of this magnitude: from the eerie drone of hundreds of cyclists grinding up hills to the swarm of red LEDs blinking through dark patches of forest trails; this is an experience not to be missed by cyclists of any kind. Simply amazing.\n Strava of the ride in: \u0026ldquo;DONEwich Dynamo\u0026rdquo; Strava of the ride back: \u0026ldquo;omanyD hciwnuD (and then some)\u0026rdquo;    Dunwich dynamo1\n      Dunwich dynamo2\n      Dunwich dynamo3\n      Dunwich dynamo4\n      Dunwich dynamo5\n      Dunwich dynamo6\n      Dunwich dynamo7\n     Dungeness Sound Mirrors \u0026ldquo;At Dungeness, in the shadow of the Magnox nuclear power station, we\u0026rsquo;ll visit visionary film-maker, author, stage-designer, and gay-rights activist Derek Jarman\u0026rsquo;s unique post-modern, highly location sensitive garden (the home is privately owned, which we will respect), before heading a little way up the road to see a set of magnificent structures built early during WW2 as precursors to RADAR - so called sound mirrors. From there we will head on to the return part of the loop, finishing in the old, peaceful village of Pluckley, where we should take advantage of one of the local pubs before riding back to the station. But all is not as it seems in quiet little Pluckley, for, with a historical catalogue of spooky goings on as long as your arm, it is reckoned to be the most haunted village in Britain. A summer evening might not be the best conditions for ghost stories, but maybe you\u0026rsquo;ll feel a prickle on the back of your neck, a breath by your ear\u0026hellip; Maybe, if we stay past sunset, we will see the spectral coach and horses driven through the village by a headless coachman, hear the creaking of the phantom gibbet swinging in the windless air at the crossroads, or maybe you\u0026rsquo;ll be chilled to the bone by the eerie cries that give Screaming Wood it\u0026rsquo;s name.\u0026rdquo;\nA once in year tour with the LBBG from Pluckley to Dungeness in the south east of England. 100km loop back to Pluckley for the train back to London.\n  Sound mirror1\n      Sound mirror10\n      Sound mirror11\n      Sound mirror12\n      Sound mirror2\n      Sound mirror3\n      Sound mirror4\n      Sound mirror5\n      Sound mirror6\n      Sound mirror7\n      Sound mirror8\n      Sound mirror9\n     Munich Took Bessie on the plane to visit my friend Hesam who lives in Munich. We joined the Munich Radlnacht (\u0026ldquo;bike night\u0026rdquo;) and explored many parts of the city. I had to leave him be, in the days following an unfortunate tumble he made (reasons for which were voluntarily forgotten :)). Took a grand ride from Munich to the Alps which stopped at Bad Tolz and rode back. The weather was fantastic, though a little on the sweltering side: averaging 36 degrees the entire duration of my visit.\n    Munich 2015 1\n      Munich 2015 10\n      Munich 2015 11\n      Munich 2015 12\n      Munich 2015 2\n      Munich 2015 3\n      Munich 2015 4\n      Munich 2015 5\n      Munich 2015 6\n      Munich 2015 7\n      Munich 2015 8\n      Munich 2015 9\n     Dartmoor I also spent a weekend visiting Del in Dartmoor and of course had to take Bessie. Rode in after a grueling 6 hours on the bus on Friday night, I took to the hills from Exeter to Moretonhampstead. More than once the grade was high enough that I couldn\u0026rsquo;t sustain a grind up them. Riding around during the day proved to be an excellent reveal of the local scenery. Sadly, the hills were unrelenting.\n Strava ride in \u0026ndash; ~27km Strava sightseeing knee killer ride \u0026ndash; ~50km    Dartmoor1\n      Dartmoor2\n      Dartmoor3\n      Dartmoor4\n     Maintenance and Upgrades to Bessie After surviving the long rides in Dartmoor and Munich, Bessie 1.0 had an untimely meeting with the back of a cab when I was riding her from London St Pancras back home. Luckily, I suffered nothing more than a bruised ego. The bump caused the headset to loosen.\n  Bessie loose headset\n      Bessie loose headset2\n     I also felt a little hesitant to ride her without fixing a few other bits as well. After consulting the London Brompton Group about fixing these issues myself, it seemed best to leave them in the hands of someone specialized in Brompton repairs. Of course, that meant taking it to the Brompton Junction in Covent Garden which I could be 100% positive of getting anything I needed mended with the proper tools.\nHere are the bits that Bessie had replaced:\n New bottom bracket Swapped 50t chainring with 54t spider ring New cranks (alloy replacing steel) New rear hinge  While it was being serviced the London Brompton Junction was generous enough to lend me an up to date S6L as a substitute. And I had only one thought in mind while riding it: this thing is as heavy as a tank. For a folding bike, that is almost inexcusable, considering the possibility of carrying the bike around is much higher than a non-folding bike. So the first thing I did when Bessie was returned to me was get an upgrade to shave off 10s of grams. I got a carbon seatpost. (55 GBP on eBay)\n  Bessie carbon seatpost 1\n      Bessie carbon seatpost 2\n     London Brompton Club - Lost Rivers: The Effra Ride Of course it was only a matter of time before I had to join a London Brompton Club ride. We had a great guide who, in spite of all factors of the elements (mostly rain), took us through the course of the river Effra which is now almost completely subterranean. Starting at Gipsy Hill station, we followed its passages, lined with stink pipes, colorful ghetto housing and bridge archways through to its conclusion at the edge of the Thames near MI6. A breath of fresh air (not from the Effra) amongst London rides.\nCapping off the experience we landed in a nice brunch restaurant opposite Vauxhall rail station. The food was delicious.\n  Effra1\n      Effra2\n      Effra3\n      Effra4\n      Effra5\n      Effra6\n     Update ~ 20/05/2017: I\u0026rsquo;ve since discovered the serial number for this frame (2267) which means it was manufactured between March and May of 1990. Near as old as I am!\n"
},
{
	"uri": "http://jsyang.ca/tools/translucify/",
	"title": "Translucify",
	"tags": [],
	"description": "",
	"content": " Originally posted to https://medium.com/this-place/translucify-374ec3f621c5\nTranslucify is a drop-in solution for mismatched background colors between a web page and its images.\nHighlights  Approximately 230 SLOC (source lines of code) No dependencies  The Why A classic way of improving the readability of a table with lots of rows is to set slightly different background colors for alternating rows. This all works nicely when you’re in control of the content that lives inside a row but what happens when the row has to show a thumbnail in one of its cells?\nIf there are only 3 different images and our prototype hard-codes the links to them then there’s an easy solution: go into Photoshop and delete the backgrounds. But what if we didn’t know where the images came from and if their format even supports transparency? JPEG, for instance, doesn’t save transparency data.\nWe can’t just go into Photoshop and manually delete the backgrounds ourselves, especially if there are potentially 2000 different images and they are served off a site we lack full access to. It was such an obvious UX issue to us that we felt it was something that had to be addressed immediately.\nWe thought it such a common problem people would’ve run into that there must already be a solution someone else wrote, right?\n “I suppose it is tempting, if the only tool you have is a hammer, to treat everything as if it were a nail.” — Abraham Maslow, The Psychology of Science, 1966\n If we could do it client-side, it would be an easy win for UX, rather than chase the image providers down and getting them to change every single image we could possibly use in this way. The only snagging point we could see was Cross-Origin Resource Sharing (CORS) headers. These are settings which control how a web browser uses images that come from a different domain than the page requesting the image (index.html on thisplace.com vs cheese.jpg on wikimedia.org). As long as the domain hosting the image (wikimedia.org) has correctly setup CORS header on images (which is to say it’s enabled for thisplace.com), it shouldn’t be a big deal.\nStackOverflow threads were our first legit results in our quest to find an existing solution to this problem. This one was especially relevant to the task of manipulating image data client-side. It’s pretty clear the end result should be a canvas tag that has the same image content as the original only with the background color removed.\nThe scope of the solution was clear now: create a one off, single purpose micro-library, using the code from the StackOverflow answer as a starting point. The background color has to be deleted, the resulting element should behave like a regular image element as much as possible (in-line element, easy to style with CSS and retain the ability for users to save that image). We’d also want to stick it in a micro-library module (that is CommonJS, AMD and plain \u0026lt;script\u0026gt; tag compatible) because we don’t mind how it’s used as long as it’s helpful to someone later.\nWe couldn’t find any existing libraries that worked like this, which is why we wrote our own.\nDiamond in the rough This naive method had a problem though. There could be many false positives inside the image of a shiny item since the code was using a high pass filter on all the pixels.\nThe solution to this was to add a flood-fill method that works like the magic wand in Photoshop and replaces all the pixels starting from X:0, Y:0. The flood-fill method worked like a charm.\nImplementation-wise, the library uses no bleeding-edge APIs or features. The only thing we needed to do was shim Function.bind() (an issue well known with PhantomJS \u0026lt;2) for our screenshot image diff tests.\nGoing further, we wanted to gauge how well either of these methods performed across browsers and devices. We wrote a jsPerf test case: this actually showed us something we didn’t expect but made perfect sense. The simpler high pass filter method of translucifying images was slower than the flood-fill method by a factor of more than 10!\nThe takeaway from this exercise was an immediate change to remove the high-pass method from the code since it was both slower and less useful.\nYou can find translucify on npm and on GitHub.\n"
},
{
	"uri": "http://jsyang.ca/art/maze/",
	"title": "Generative Mazes",
	"tags": [],
	"description": "",
	"content": " Mazes have always fasincated me. They can be generated via some simple rules and take beautiful, myriad forms.\nNew Year\u0026rsquo;s Eve 2014 Maze Maze generator remixed! New years message written for friends for 2014.\n source code  Maze generator using the \u0026lt;table\u0026gt; element  Maze generator toy that draws mazes with tables and CSS-borders instead of canvas: runs in IE and also quite well on the Kindle experimental browser.\nUses the basic recursive backtracker algorithm to carve a maze out of untouched cells in the grid. Also implemented in mazegen.html is a basic editor to create a logo array: mark cells as visited before the maze carving begins- the logo will remain unmolested as the carving proceeds.\nmaze.html A single carver maze. mazegen.html 4 carver maze. steve.html For my friend Steve Pearce's 25th birthday. :)   source code  "
},
{
	"uri": "http://jsyang.ca/hikes/alice-holt-forest/",
	"title": "Alice Holt Forest (30km)",
	"tags": [],
	"description": "",
	"content": "From Bentley station we join a footpath which takes us parallel with the railway before joining a trackway which takes us in to the Alice Holts Ancient Forest a forest, which used to provide oak to build ships for the Royal Navy, the trail winds through the forest to tiny settlement of Bucks Corner.\nLeaving the forest we cross heather covered heathland to reach Frensham Great Pond which along with the little pond was originally created by the Bishop of Winchester to provide fish to his court and now an important wetland habitat managed by the National Trust.\nWe cross Frensham Common with its mosaic of colourful heathers gorse and oaks to climb up the Devil\u0026rsquo;s Jumps a series of three jumps (hills) where according to local folklore the Devil used to amuse himself by jumping from one to another. From the jumps we will have panoramic views over the Surrey Hills.\nDescending from the jumps the path crosses heathland to pass Frensham little pond and join the River Wey, the trail now passes through woodland and pastures to join the Greensand Way which leads us into Farnham for our train home.\n  1st\n      2nd\n      3rd\n      4th\n      5th\n      6th\n      Map\n     "
},
{
	"uri": "http://jsyang.ca/cycling/london-to-brighton/",
	"title": "London to Brighton Ride",
	"tags": [],
	"description": "",
	"content": "                             First long ride (~100 km) from London to Brighton after getting the 100GBP Argos \u0026ldquo;crusader\u0026rdquo; bike. We tried following a basic Google mapped route but weren\u0026rsquo;t used to the roundabouts. Almost ended up on an M series highway for one of the turns. And I learned the importance of continuously eating on a long distance bike ride. Felt a bit faint before Ditchling; blood sugar was low.\n   Brighton 1\n      Brighton 2\n      Brighton 3\n      Brighton 4\n      Brighton 5\n     Update 16/08/2015: I\u0026rsquo;ve done several more London to Brighton rides, each better prepared than the last. Different routes and on different bikes. Still very enjoyable, it is a classic ride with the London Beer and Bike Group.\n"
},
{
	"uri": "http://jsyang.ca/hacks/foldable-boat/",
	"title": "Foldable rowboat v1",
	"tags": [],
	"description": "",
	"content": "                             Over the summer of 2013 several very well made corrugated plastic boats were featured on DIY sites and on r/buildaboat. It all seemed very simple to do and I\u0026rsquo;d always wanted my own boat to fool around with so I thought why not! Corrugated plastic in large sheets were easy to come by once a little research had been done and the only other materials which were required were reusable zip-ties and some kind of propulsion device: a paddle or a small trolling motor. Much credit is owed to the pioneers of this strange art!\nMaterials Corrugated plastic (AKA Coroplast) was the material of choice for forming the hull in all of the previous examples of these foldable boats. Mine would be no exception to this pattern, and so I set out to source the largest readily available sheet of corrugated plastic I could find. The Discount Builders Supply store in the Mission provided these boards in generous sizes. Purchasing two sheets, I slowly walked home with them, catching all sorts of cross winds with my planks of white plastic. A better way to transport these things is highly recommended.\nThe first sheet was to be used as the hull and the second was for the furniture that could line the interior of my watercraft (seat, bracing, internal hull).\nThis boat also had to be as simple as possible since that was only way it could end without abject failure. With regard to this, I decided against any means of moving the boat which was not a paddle. Luckily, I found a nice paddle on Amazon for the wallet-pleasing price of $20 taxes included!\nScale Models The first thing in creating any sort of product is figuring out how things will come together in a way which satisfies all your needs. With a foldable boat this means creating a scale model that has a contour which is simple and reasonably easy enough to fold manually. Here are two of the better folds I tried:\nThe style on the left was chosen as the keel fold would be hard enough to cease once, let alone twice as on the kayak-like right model. The keel was folded in a way which minimized any seam contact with the water line. A \u0026ldquo;milk-carton\u0026rdquo; style fold was used for the back to make it easier to refold.\nInitial Folding With the combined effort of a small dog and two zesty humans, the boat slowly came together according to the pattern that was tested in the scale model. Below you can see the progress:\nFold photos    Boat fold1\n      Boat fold2\n      Boat fold3\n     Maiden voyage and success! My lovely friends were convinced I was going to drown in my newly crafted vessel once it had been unfolded to stow away for transport and refolded for use. Survival was fairly certain in my opinion, so we decided to call the wager by launching the Coroplast boat at Lake Merced, about 20 minutes south of SF.\nCuriosity brought a fellow water-sport enthusiast over to help us with the launch, I was especially thankful as the winds were strong that day.\nWithout further ado, these follow photos prove that I didn\u0026rsquo;t drown!\nLaunch photos   Boat launch0\n      Boat launch1\n      Boat launch2\n      Boat launch3\n      Boat launch4\n      Boat launch5\n     The project was a great success and now we have experience building a simple boat! Paddling was tough exercise though so I might just stick to designing and launching them. Very much looking forward to the next boat build!\n"
},
{
	"uri": "http://jsyang.ca/games/gdw1/",
	"title": "Gamedev Weekend 1",
	"tags": [],
	"description": "",
	"content": " Junior\u0026rsquo;s first 48 hour collaborative gamedev Life gets boring sometimes when you do the same thing over and over again by yourself. Two weeks ago, I had an epiphany: I didn\u0026rsquo;t have to do the same thing by myself if there were people I could coax into doing it with me. Must have been what I\u0026rsquo;d missed out on all this time.\nFinding people was easy enough: I scrounged 30 seconds of my day and put up a Facebook status update.\n \u0026quot;Find adventure and excitement in game development!\u0026quot; \u0026quot;Dedicate 48 hours of your time for the glory of the motherland!\u0026quot; (Not really though, it was slightly more boring than that.)  Luckily, some friends fell for the bait almost immediately. I contacted these upstanding citizens and thinned down the list to whoever would be available soonest.\nThere was about a week of pre-planning involved in this project. We started a measly scrap of a Google Doc and turned it into a kaleidoscope of schedules, tasks and game mechanics. It felt wise to ensure as smooth a start as possible. If we could make that happen, we\u0026rsquo;d have an incredible amount of creative momentum.\nThe resulting high level plan boiled down to using these technologies in our game:\nLanguage : Haxe Framework : NME Platform : Flash  Move fast, break all the things A classic slogan in the world of tech. Boy, did things break. Haxe turned out to be a poor choice of tech for a few reasons:\n No Haxe experts on the team, both of us were totally green in using the language. This meant that fixing compilation warnings and errors took up most of the coding time. Actual progress in programming the foundational features in the game proceeded at a snail\u0026rsquo;s pace because of this.\n Flash has lackluster performance on mobile devices which support it. We could not figure out how to overcome touch event delays or if the device was even able to register certain events (like touchend) properly.\n Other \u0026ldquo;subtle\u0026rdquo;, but significant language annoyances which this blog post sums up pretty well.\n Near total lack of up to date and properly searchable API documentation.\n We disregarded the key feature which had originally made us choose Haxe: its cross-compilation into many languages.\nThe decision to choose Flash as our target platform muted that advantage.  Inevitably, we gave up trying to use this new language to write the game and switched to HTML5. No time was wasted trying to port the existing code over. Having devices ready for testing made this a confident decision and we enthusiastically wiped the slate clean.\nGame mechanics A clever idea came out of some brainstorming we\u0026rsquo;d done on the first night of the gamedev: combine the player\u0026rsquo;s attack with the player\u0026rsquo;s movement. With this key mechanic and the newly programmed collision detection for game objects, we whipped out a mini-game in about 8 hours time. Defend yourself from an onslaught of enemies in a top-down view reminiscent of Crimsonland.\nThe player has to steer his character and shoot wrenches at enemies simultaneously. When the enemies touch you they wear down your health and you slowly die. Enemies spawn faster as time goes on. An \u0026lsquo;enemies killed\u0026rsquo; counter keeps track of how many heads you\u0026rsquo;ve bashed in with your infinite supply of airborne wrenches.\nI did most of the core engine coding, while Hesam tweaked the game balance and feel. This combination worked quite well since it meant there were fewer low level conflicts whenever any part of the game had to be changed. And about 9 hours later, we had a working build of the game that ran on both the Android tablet and the iPad.\nWhere do we go from here? We may reuse some of this code to refine the game idea into something more complete, though the experience of team-based game dev will have to suffice for now. As brutal as this event had started out, it was a miracle we got anything working at all. For our first taste of collaborative creation, we were very pleased with what we had at the end of 48 hours. Sunday brunch solidified that rewarding feeling in food form.\nActual Time Spent  Hours Used Day for Game Dev Total Hours Fri 3 / 5 Sat 8 / 24 Sun 2 / 4 Total 12 / 33 Productive* for ~36.4% of the time. Around 40% of *that* time was spent going over more / new plans. The remaining time is a fair estimate of total physical production time e.g. drawing out mechanics diagrams, debate on how to balance the movement, etc.  Source code See code on GitHub\n"
},
{
	"uri": "http://jsyang.ca/repairs/notes/",
	"title": "TechShop notes",
	"tags": [],
	"description": "",
	"content": " Various tidbits learned from SF TechShop classes Oxy-Acetylene Torch Starting: Open the acetylene valve to the torch first, then the oxygen valve.\nStopping: Close the oxygen valve, then the acetylene.\nGas valve open/close order mnemonic: POOP \u0026mdash; Propane, Oxygen, Oxygen, Propane.\nOxygen blown by the cutting head of the torch actually burns the steel / iron which is being cut. The extra oxygen combusts the material which turns into slag (~oxide) falling off onto the floor.\nAcetylene pressure in the hose needs special attention: acetylene detonates above 15 PSI. The explosive velocity is ~2270 m/s which puts it nearly in range with low-end high explosives. For comparison, TNT detonates at 6900 m/s, while RDX (C4) detonates at 8750 m/s. More info here.\n  Flashback is when the gas flame disappears into the hose, which may end up igniting the tank. Sometimes there might be safety features within the welding set that prevent such a catastrophic failure. Though one cannot rely on these. A loud whistling noise coming from your welding equipment is usually a sign that this has happened. Shut all valves off immediately. Panicking is useless as you will not be able to outrun such an explosion.\nBasic Metal Shop Bandsaw blades should be installed correctly. How to tell if it\u0026rsquo;s not the right blade for the material? Multiple teeth should always engage along the cut of the workpiece. If fewer than 3 teeth on the bandsaw blade are simultaneously touching the stock material, you will have difficulty cutting it. Using the wrong blade also wears the blade out much faster due to the fact that there are less teeth per cut to uniformly absorb cutting forces. An individual tooth would needlessly bear more force.\nCoolant valve on the horizontal bandsaw should be adjusted to completely coat the blade while it\u0026rsquo;s cutting.\nDisk sander is most safely used on its right side; it spins clockwise so if the workpiece slips out of your grip, the table should stop it from flying off. Outer edge of the disk has a higher velocity, meaning material placed there will be ground down faster than at a spot towards the center. Never lean into your workpieces on this machine.\nMIG Welding To burn hotter, increase the wire feed speed. Voltage only determines the arc length, not the energy delivered to the torch tip.\nMIG Welding 2 - Make Better Welds As with soldering, welding is about heat transfer. The key is knowing which work pieces to deliver sufficient heat to, for creating a balanced and uniform weld. Weld should comprise enough of each work piece for maximum strength. Thus, the tip angle you point should be directing the heat into the piece which most requires it; larger piece means more bias for that area in the welding top angle.\nLaser Cutting and Etching Laser cuts are always an exercise in pointilism. Raster prints on the laser translate to dithered cuts, much like an inkjet printer.\nCutting chloride polymers will release (gasp) chlorine gas. Never do this unless the goal is to poison yourself.\nMetal Lathe Align work piece mounts, 3 tooth chuck holds and centers cylindrical objects like poles, etc, while 4 piece can hold things of arbitrary shape.\nSafety is a big concern with using the metal lathe, it can pull things into the spindle and tear them apart very easily if anything happens to be caught.\nGears and speed are adjusted according to material being cut, much like with drill press or other cutting tools.\nNextEngine 3D Scanning Occluded surfaces need to be mapped correctly, adjust the axis of rotation to minimize number of occluded surfaces.\n\u0026hellip;\nTIG Welding TIG welding is much like gas welding where the torch merely heats up the workpiece to form a puddle for the filler metal to weld with. Gasket and tungsten tip should stick out about half the radius of the gas cup. Tungsten should be sharp, though ball-tipped to make sure the cone of where the arc will form is predictable.\n"
},
{
	"uri": "http://jsyang.ca/art/raygun/",
	"title": "Raygun",
	"tags": [],
	"description": "",
	"content": "                             Laser shooting prop gun After finishing a few basic machining courses, I was very much tempted to explore inventing and making something which was not a test weld or a simple bottle opener from 18 gauge mild steel. Enter the raygun shooting saloon. Initial morsels of the idea were inspired by a few prior instances of this laser toy that are scattered throughout the Internet.\nAs most of the actual complexity lay in the programming of the microcontroller to poll for laser hits on the target, it was only natural to use this as my first actual machined project.\nProto-Raygun Initial ideas for the design of the raygun were very vague. As the materials that were used were all scavenged out of the scrap bin, the pieces were chosen according to how much they looked like parts of a gun. Having no other plan than \u0026lsquo;just make it look like some kind of gun\u0026rsquo;, I defaulted to combining these materials randomly.\nAlthough the result was half decent in terms of fit and finish, the piece resembled a Saturday-Night-Special more than a space-age raygun. Not exactly the look I was hoping for, if I didn\u0026rsquo;t want to get into trouble. To ensure things go smoothly for the next attempt, I headed to the virtual drawing board.\nSketchup results and better planning Some time after the initial attempt, it dawned on me that having a well-defined plan for making this raygun would be a good idea. And after overcoming the tiny learning curve of Google Sketchup 8, this design popped out. Even if I couldn\u0026rsquo;t manage to fabricate anything within a beginner\u0026rsquo;s tolerance of the sketch, it could still be useful as a base to apply design changes later.\nIn a perfect world where I had complete mastery of all the tools and techniques of metalwork (or sent the design to Shapeways for 3D printing), this is what the end result should look like.\nProgress One to one template of the grip plates. Didn\u0026rsquo;t have the materials to cut these straight out, so both plates had to be butt-welded and then cut. These will be joined together to form the box-grip which holds the AA cells.\nTrigger and trigger housing, prior to welding. As with the grip plates, I had to weld a few different scraps to get to the dimensions that were close to the CAD drawing. Laid a pair of AA cells on the plate to give an idea of how much inside space there is left to work with.\nTrigger housing turns into a single piece! Sadly a miscalculation made me cut more of the trigger plate than planned; jagged inner edges are off by about 0.25 in.\nFinally found some mild steel tubing of correct diameter in the scrap metal bin; promptly cut down to manageable size.\nThe 3 distinct segments of the raygun. Grip is finally a single piece! Grip receives more metal to bridge the gaps between the plates. The trigger itself is missing here.\nEnd of the night progress as of Aug. 10, 2012. Grip is basically complete. Battery cover still needs to be fit into this somehow, and mild metal finishing / filing to round out the boxy appearance of the grip. Far too much metal dust was inhaled.\n"
},
{
	"uri": "http://jsyang.ca/art/sculpting-2013/",
	"title": "Sculpting in 2012, 2013",
	"tags": [],
	"description": "",
	"content": "                             Starman \u0026amp; Crashed UFO late 2012\n   Starman1\n      Starman2\n      Starman3\n     A ceramic homage to Earthbound created as part of a ceramics course. The starman\u0026rsquo;s insignia is glazed in black. Its outer coat is spray painted with silver metallic paint.\nInstamorph T-Rex Skull August 2013\n   Trex1\n      Trex2\n      Trex3\n      Trex4\n     Used a 3D model reference to sculpt a ~1:20 scale T-Rex skull from Instamorph (Polycaprolactone). First, I made the top half of the skull as closely as possible to the 3D model. Then I modelled all the teeth individually and inserted them into the warmed gum regions. Possible hazards: scalding water and steam burns.\nFallout Power Armor Helmet Dec 2012\n   T51b1\n      T51b2\n     Smushed polymer clay into the form of the iconic T-51b Power Armor helmet from the Fallout game series. Burnt the top of the helmet in the toaster oven slightly for a \u0026ldquo;rust\u0026rdquo; effect. Compare with an in game image.\n"
},
{
	"uri": "http://jsyang.ca/tools/traveling-salesman/",
	"title": "TSP Solver",
	"tags": [],
	"description": "",
	"content": "  The travelling salesman problem (TSP) asks the following question: \u0026ldquo;Given a list of cities and the distances between each pair of cities, what is the shortest possible route that visits each city exactly once and returns to the origin city?\u0026rdquo; It is an NP-hard problem in combinatorial optimization, important in operations research and theoretical computer science.\n Iteratively solving the Travelling Salesman problem with k-opt operations Fast operations such as 2-Opt are less computationally expensive, but due to granularity, more likely to become stuck in local extrema. The higher level operations such as 3- or 4-Opt are less likely to be trapped in the extrema. Parallelization, if permitted in the solution, also reduces the runtime cost. Sept. 17, 2010 Original implementation Apr. 4, 2011\tRemoved dependency on raphael.js; refactored everything. Created a more detailed README. -------------------------------------------------------------------------------- Object\tDescription Loc\tLocation - predefines some aspect of the distance of the tour. Contains a distance function specific to this geometry: Euclidean. Tour\tEssentially a sequence of Locations. The tour distance is a function of its Location visit sequence. Can also replace the current sequence if a new sequence has an improved tour distance. -------------------------------------------------------------------------------- Heuristic\tDescription CLUSTER Group locations into clusters (neighborhoods) and optimize the graph within the clusters in parallel. 2-FLIP Reverses a subsequence of the tour. 3-MOVE Moves a subsequence within a sequence. 3-SPLIT Splits a sequence into 2 sequences each carried out in parallel. 4-SWAP Swap 2 subsequences from different Tours. -------------------------------------------------------------------------------- 2-Opt: FLIP operation Reverse a selected portion of the original Tour. For example: Head _/_ Interior | | Body - B - C - D - E - _____/_____ | | Tail Exterior / A - .. F - | i j 2-OPT Interior reversed A - B - C - D - E - F ----\u0026gt; A - E - D - C - B - F Exterior reversed F - B - C - D - E - A Reversing the order of either interior or exterior completes the 2-opt. Though the direction of the sequence is different in between these cases, the geometry of the Tour remains the same; \u0026quot;unknotting\u0026quot; any crossed paths. -------------------------------------------------------------------------------- 3-Opt: MOVE operation Move a subsequence to a new position within the same Tour; treating the segment as a single location in the larger sequence. i Starting index of the segment l Segment length shift Where to shift to the new position Cut the segment from the old sequence, and build the new sequence by adding anything before the start index, the segment and then appending any remaining Locations in the old sequence that weren't in the segment. Length 3 Segment 3-OPT MOVE Shift New position ____/__ SHIFT BY 1 / ____/__ | | -----\u0026gt; | | | A - B - C - D - E - F - G A - B - F - C - D - E - G 1 | / Shift Length 3 Segment 3-OPT MOVE Shift New position ____/___ SHIFT BY 2 __/_ ____/___ | | -----\u0026gt; | | | | A - B - C - D - E - F - G A - B - F - G - C - D - E 1 2 |___| / Shift -------------------------------------------------------------------------------- 3-Opt: SPLIT operation Split a subsequence of a Tour off into another Tour (can be empty). Much like the MOVE operation, we extract a subsequnce of a specified length from the first Tour and put it somewhere in the destination Tour. The resulting Tours should begin at the same location if not roundtrip. i Starting index of segment l Segment length j Insertion index in destination Tour Length 3 Segment 3-OPT SPLIT Original Tour ____/__ INTO NEW TOUR A - E - F - G | | -----\u0026gt; A - B - C - D - E - F - G New Tour 1 A - B - C - D | / Total DISTANCE of Tours should Shift follow the triangle inequality. -------------------------------------------------------------------------------- 4-Opt: SWAP operation ...  Source code See code on GitHub\n"
},
{
	"uri": "http://jsyang.ca/art/tunnel/",
	"title": "Textured 3D tunnel",
	"tags": [],
	"description": "",
	"content": " I spent a weekend night implementing an old demoscene 3D tunnel rendering trick in HTML5, here are the results:\nTextured, shaded, ray casting rendering of a tunnel. Camera is free to rotate, pan and change focal length. Controls: W + mouse look A S D    Source code See code on Github\n"
},
{
	"uri": "http://jsyang.ca/tools/road-signs/",
	"title": "Road signs",
	"tags": [],
	"description": "",
	"content": " This was an undergraduate computer vision extra-curricular project.\nImage segmentation goal: finding text within am image of a road sign The growing abilities of video feed APIs allow for mobile and domain-specific programs that were previously out of reach. One application that I had in mind was video frame text extraction, which itself could be the foundation for magnification or text-to-speech capability that could aid the visually impaired, translation for foreign language signs and contextual advertising services. The idea is to help foreigners understand local signs.\n Update: Since this article was written, Google Goggles has been released and implements much of the functionality described here\n Of course I can\u0026rsquo;t do all of this alone; so the goal I\u0026rsquo;d set out to meet was simple: develop an algorithm for text detection using a Multi-layered Perceptron Neural Network (feed-forward neural network). In addition, the entirety of the implementation was to serve as an easily- modified and reusable scaffold for further experiments in neural networks.\nApproach In creating the dataset (both training and test), Google Image Search returned 30 photos of street signs. I then wrote a markup- generator to mark which areas contained text as part of the supervised training. The \u0026ldquo;correct\u0026rdquo; regions are highlighted and these are used later to check if the neural network predicted correctly. The overlay is a simple bitmap: non-zero alpha bit for the text areas and zero alpha otherwise. All 30 images are marked by highlighting the regions and saving the highlighting overlay.\nSince many of the images contained extremely high levels of noise in both the compression format as well as through non-important textures, a Gaussian blur had to be run twice through each tile of the image before being fed into the sensitive edge-detection and energy filters.\nThe Energy filter was created empirically after much experimentation. Visually, I played around with various schemes of luminance and displayed the result in the runFilters code that was written until a satisfactory contrast detection filter was had. EnergyMap is particularly sensitive to road signs. The Sobel operator was found through literature and applied in its 3x3 configuration.\nSeveral different neural network layouts were tried. Each one was trained by breaking the image into 8x8 tiles, feeding those tiles through a few filters and then through the nodes of each NN. You can see the schemes for several of the NNs, as well as the object design, in the code below:\nImplementation The complete NN framework (supervised training set generator, NN training program, NN test program) was written from scratch in JavaScript for maximum portability, allowing users to run the software from any computer with a modern web-browser. Internet Explorer is not supported due to lack of support for the canvas tag.\nThe first step in implementation was to feed a set images and a markup of the text regions on those images. These two sets were then used in determining the weights for the nodes of our models. Our test set consisted of 3 images that were part of the original validation set, this is because the correct areas are already marked so testing the NN could be done automatically. Below is a system schema.\nThe chosen activation functions between the Neurons in the NN should be sigmoid functions as is standard with references. Due to this fact, backpropagation with the delta rule, for output layer neurons, of which there are exactly 1 in each model, becomes:\nDelta output = (actual output)(1 - actual output)(desired output - actual output)  Deriving the derivative for the sigmoid function via chain rule, we get the delta rule for the hidden Neurons:\nDelta hidden = (actual output)(1 - actual output)( Sum(delta receiver neuron) dot product W receiver neuron for hidden)  These delta values are used in conjunction with the learning rate and the momentum of weight change parameter to change the weights with each backpropagation. A typical sequence for a single 8x8 tile requires that we activate the NN first and then backpropagate the errors through the NN to correct for mistakes in classification.\nTo build layers, we create the individual neurons and then link them together in the input calling arrays for each layer, as well as through the receiver arrays. The NN creation code can be seen in NN.js. This way, the network can be arbitrarily arranged and we can have skip-layer connections from one level to any higher level.\nInitial Model Parameters Determining the threshold of the output layers proved to be an immense challenge. There is no standard way of solving this optimization problem so with the limited time we had to finish this project we tried many thresholds through trial and error. Given more time, we would probably implement an automatic cross-validation system that would give better estimates on a suitable threshold.\nTo be on the safe side, our implementation of the threshold estimate was highly lenient and rounded down to the first significant digit minus 1 (0.033 ~ 0.02). To get this number, we gathered the total output values for correct and incorrectly predicted tiles and then took the normal and geometric mean of the two. Roughly our threshold formula is:\nt NN = Ugm - | Ugm - Um | Threshold NN = (Floor( 100 t NN ) - 1) / 100  This works well enough as a starting point and was already a better threshold. Eventually through manual cross-validation in Excel we reached a threshold of 0.02144445 which gave us the best threshold for the NN1 model. Thresholds for other models were obtained in a similar fashion.\nModel Performance The models were evaluated using misclassification rate on the regions returned as text for the images. Defining what constitutes as false positive and as false negative was a bit of a challenge. As a case in point, borders of signs which also had high energy gradient and similar colour and style as the text they enclose could be argued as being text or not. We made these assumptions in determining the misclassification rate:\n Small text or illegible text that were not detected were classified as true negative Borders detected as text will be classified as false positive Other non-marked areas will be classified as true negative  This was consistent with our markup images and thus the test set used in the runNN program gave us the misclassification rates. Red tiles are predicted tiles which were incorrect, green tiles are predicted tiles which are confirmed correct with our markup validation data. These are the results of each model being run on the test set:\nIn short We found that several factors influenced the ability to detect text. Some of the more obvious ones include font size and colour of the text, amount of lighting in the picture, and even the texture and complexity of the background. First off, our definition of what text was appeared to cause a lot of errors in the generated model. We did not tightly control what passed for a \u0026ldquo;text region\u0026rdquo; other than a qualitative sense of whether or not the region was legible. This would have had a major impact on our selection for training images and markup. If we had used only a certain size font as the training set target then perhaps a better result could be obtained. This same problem exists in the test set as it was part of our data set that we had gathered.\nOur training set could have also been much greater for the more complex models such as NN1 and NN2. No doubt the ambiguities would have been less severe in swaying the classification of models of greater layers. Furthermore, the parameters for the models raise questions about how they might be changed or determined to a precision. Without a good threshold it is very hard to isolate the good classifications from the false ones.\nThe generated system produced some reasonable results, an improved version could be well used as the basis for a separate feature extraction or classification system. It could also be improved if more edge features and image processing filters were available to the NN.\nLinks  Wikipedia: Canny edge detector\n Sobel operator reference\n NN backpropagation derivation\n Backpropagation details\n Neural network notes\n More on sigmoid back propagation for hidden units\n  "
},
{
	"uri": "http://jsyang.ca/tools/colorrunbot/",
	"title": "ColorRun.pl bot",
	"tags": [],
	"description": "",
	"content": "A regular lurker on the /r/WebGames subreddit, I found a perfect game to write a 15 minute bot for a game posted that was posted.\n "
},
{
	"uri": "http://jsyang.ca/tools/gmbrowser/",
	"title": "GMBrowser",
	"tags": [],
	"description": "",
	"content": " Cache Google Maps tiles by browsing the location of interest This is simple C app that I wrote up and tested in about 2 hours that automatically saves the map tiles of Google Maps as you browse a location of interest. The bundled tool, tiler is a handy utility for arranging the matrix of the gathered Google Maps tiles for a certain zoom level.\nOriginally this was written as a fast and dirty way to get lots of map data for an independent project in the summer of 2009. As the API or URLs may have changed since then, its current working status is not guaranteed. As of May 2010, it still works.\nZoom level 4, centered North Carolina\nSample directory with some saved tiles\nThe tile images are saved into the app directory under folders corresponding to their zoom level (0 - 20). Controls and interface are minimal: use your mouse wheel to zoom in and out, click and drag to move the map and Esc to quit.\nOne note: the graphics library that I used to read the PNG files is NOT- threadsafe so you may encounter distorted palettes and crashing if your internet connection is slow or unreliable. If GMBrowser keeps crashing, run the generated fixme.bat file. It will clear the problematic directory (make sure you want to do this before you run it!)\nSample Tile Output  #body img[data-map=\"true\"] { margin: 0; height: 256px; width: 256px; } #map-table td { border: 0 ; padding: 0; height: 256px; width: 256px; } #map-table { width: max-content; }    Update 2017 Of course, much more sophisticated tools exist now for extracting map data. Or if you want to go next-level, there\u0026rsquo;s always the OpenStreetMaps project which seeks to be a fully open-sourced replacement for the proprietary mapping services like Google Maps.\n"
},
{
	"uri": "http://jsyang.ca/repairs/m2kb/",
	"title": "IBM M2 Clicky Keyboard Repair",
	"tags": [],
	"description": "",
	"content": "                             These particular model M buckling spring (B-S) or \u0026ldquo;clicky\u0026rdquo; keyboards were paired and sold with IBM PS/1 and some PS/2 systems circa 1990. As of writing, my M2 keyboard is about 18 years old. Old age brings about hardware failures of all sorts and the M2 is no exception. The most common, non-mechanical, failure people have encountered have been dead keyboard controller boards.\nWhen plugged into a PS/2 keyboard port, the M2 shows CapsLock and Scroll Lock lights on but is irresponsive after POST (Power On System Test). A keyboard error message may be displayed and keys will not generate characters with the broken board.\nTo fix this board you need to open up the M2 and replace 2 capacitors: a small cylindrical component closer to the indicator lights (labelled C3) and one larger, similar component farther away (labelled C1).\nThese have the following specs: 50V 2.2uF, 16V 47uF, respectively. You can replace them with capacitors that are very roughly within the range of specs. The fault tolerance is huge on these things. Positive leads towards the lights.\n  M2kb 1\n      M2kb 2\n      M2kb 3\n     Briefing First, before you disassemble the keyboard, take a photo of the keyboard layout of the keys. You may need this if your keyboard is an international version.\nStart by removing all the key caps. Using a flatheaded screwdriver, gently pry each key cap off of its pedestal. Pry white keys first, leaving the gray keys last as they have plastic retainer legs that you need to handle carefully. Once all the key caps are off, take a second photo of where all the springs are located. There will be more holes than B-S parts when you reassemble the keyboard, so this will tell you where they belong. Handle these springs carefully as well. They provide the clicking response when you type, so if they break, you will have a defective keyboard.\nCarefully turning the keyboard over, there are 2 square screws. Remove them. Then using a flathead screwdriver, slip the blade into the crevice that separates the top plastic cover from the bottom (where you removed the screws from). Slide the blade along the slit to pop open the latches that hold the keyboard together. This removes the top cover from the bottom cover. At this point the B-S mechanisms will probably all come loose and fall out. Collect them all and keep them together in a container.\nOpening the Guts One cover holds the B-S array, the other houses the keyboard membrane and controller. You want to remove the controller from the bottom cover. Remove the two dead capacitors by desoldering them or by brute force. Once clear, solder in your replacements and plug the PS/2 cable to controller back in and test it. Powering on, the lights should all clear and/or NumLock is the only light on after POST. If you\u0026rsquo;ve placed the controller board back into the cover, tap a few key spots on the membrane. If they register key presses, you\u0026rsquo;re in business.\nReplace all the B-S mechanisms into their proper holes from the photo. To seat each B-S properly, you need to make sure that the T end of the plastic square fits into the groove so that the spring is near the top of the hole for the key. Failing to do this means that the spring will not function properly and you will have mushy keys.\nMaking sure all the spring tabs are in place, put the rubber mat on and align the screw holes. Then VERY carefully, snap the back cover of the keyboard on WITHOUT dislodging any of the B-S tabs (the rubber mat will help you do this, if it stays aligned). This step requires a lot of patience. It is critical you get right if you want your keyboard to function well. You will hear several snaps as the back cover latches back onto the front cover. After which, the keyboard should hold itself together as during disassembly. Put the two screws back in and properly re-seat all the key caps so that you have a clicky sound when each key is pressed.\nStep 4 : Profit Congratulations, you have now successfully repaired your IBM M2 keyboard! It will bring you many years of joyful typing and endless productivity.\nLinks  Geekhack wiki: Repairing the IBM Model M2\n Instructables: Clean your vintage IBM M2 clicky keyboard!\n Picture of the M2 US 101-key layout\n Geekhack: clicky keyboard sound samples\n  "
},
{
	"uri": "http://jsyang.ca/games/jscc/",
	"title": "DOM-based RTS Engine",
	"tags": [],
	"description": "",
	"content": "                             A Command and Conquer engine in JS Update Nov. 2011:\nAditya Ravi Shankar created a version that uses canvas blitting instead of DOM manipulation.\n Your unfinished C\u0026amp;C demo inspired me to give it a shot. My version uses HTML5/Canvas and works in Chrome/Firefox.\n  http://www.adityaravishankar.com/projects/games/command-and-conquer/\n http://www.adityaravishankar.com/2011/11/command-and-conquer-programming-an-rts-game-in-html5-and-javascript/\n  This was a very ambitious project to fully recreate the first C\u0026amp;C game and introduce in-game objects for expansion by user scripting. I envisioned an SDK type end-result as the final piece. The sparks flew in late 2007 and main implementation had begun by the time summer 2008 hit.\nThere were a multitude of intermediate problems that needed to be solved: question of creating / converting terrain maps, accurately modelling the damage and movement of units in the original game, extracting all the frames of all the game pieces, and handling animations, to name a few.\nPrior to the wide-spread adoption of the canvas tag, the most efficient way of manipulating hordes of sprites required for an RTS game was via the DOM image elements. Development stopped after about a week of intensive coding. As the first moderately large Javascript project, I felt the brunt of ill-planning and subsequently burnt out.\n   Jscc 0\n      Jscc 1\n     This is what I eventually had working before burning out:\n- Terrain blocks construction and movement of vehicles - Mobile construction vehicle unit / all non-turreted vehicles - Construction tech-tree prerequisites - Usable nuclear super-weapon - Structural damage and destruction - Unit and building selection, with healthbar - Basic construction interface - Fire and smoke animations  The Game Engine Click inside the iframe to interact with the engine.\n "
},
{
	"uri": "http://jsyang.ca/games/flash-games/",
	"title": "Flash games",
	"tags": [],
	"description": "",
	"content": " Wrote and animated a lot of Flash games/animations back in the early 2000s during my time in high-school. Here are a sample of some of the better ones.\nDefend 2 - Super Tank (2004) \nControls  WASD to move the tank mouse to aim, click to fire SPACE to switch weapons  Base Attack - 2D War Simulator (2002) This was sort of half-way between a game and screen-saver. Two armies (white vs black) fight each other. Each battle (reload of the page) is completely random: background scenery changes, build order changes, reinforcements change.\nI loved making games that made use of many random factors. The only controls available to pause/unpause the sim with the UP/DOWN arrow keys. This one drew heavy inspiration from Armor Alley. I was clearly more fascinated by the ground forces sent around by the AI than the actual gameplay involved in this helicopter game. This Flash game would be recreated years later as Microarmy.\n\nThere were several types of units available to each side:\n Foot-soldier Tank Anti-air missle truck Sabotage van Bomber  Each side held its territory with a pillbox defending the main base: building with a radar dish atop. The game was lost once the main base was destroyed.\nRocket Defense (2001)   Controls  A / S to change the rocket\u0026rsquo;s trajectory Click the rocket on the launcher to fire  Podlegs (2001)   "
},
{
	"uri": "http://jsyang.ca/_header/",
	"title": "",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://jsyang.ca/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://jsyang.ca/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://jsyang.ca/",
	"title": "jsyang.ca",
	"tags": [],
	"description": "",
	"content": " jsyang.ca I\u0026rsquo;m a lead software developer currently living in Manchester, UK.\nLikes: making / breaking / fixing stuff, games, cycling, and climbing.\n"
}]